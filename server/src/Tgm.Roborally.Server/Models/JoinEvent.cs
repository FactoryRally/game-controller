/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Converters;

namespace Tgm.Roborally.Server.Models
{ 
    /// <summary>
    /// If somebody joins a game
    /// </summary>
    [DataContract]
    public partial class JoinEvent : IEquatable<JoinEvent>
    {
        /// <summary>
        /// This id uniquely identifys the player (in a game).   **Not** to be confused with the &#x60;uid&#x60; which is used for authentication
        /// </summary>
        /// <value>This id uniquely identifys the player (in a game).   **Not** to be confused with the &#x60;uid&#x60; which is used for authentication</value>
        [Range(0, 8)]
        [DataMember(Name="joined_id", EmitDefaultValue=false)]
        public int JoinedId { get; set; }

        /// <summary>
        /// True if the player left instead of joining
        /// </summary>
        /// <value>True if the player left instead of joining</value>
        [DataMember(Name="unjoin", EmitDefaultValue=false)]
        public bool Unjoin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JoinEvent {\n");
            sb.Append("  JoinedId: ").Append(JoinedId).Append("\n");
            sb.Append("  Unjoin: ").Append(Unjoin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JoinEvent)obj);
        }

        /// <summary>
        /// Returns true if JoinEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of JoinEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JoinEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JoinedId == other.JoinedId ||
                    
                    JoinedId.Equals(other.JoinedId)
                ) && 
                (
                    Unjoin == other.Unjoin ||
                    
                    Unjoin.Equals(other.Unjoin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + JoinedId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Unjoin.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JoinEvent left, JoinEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JoinEvent left, JoinEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
