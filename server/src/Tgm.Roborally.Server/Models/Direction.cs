/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Tgm.Roborally.Server.Converters;
using Tgm.Roborally.Server.Engine.Statement;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	///     Defines a direction in a 2D system. the X and Y values can be defined by the client.
	/// </summary>
	/// <value>Defines a direction in a 2D system. the X and Y values can be defined by the client.</value>
	[TypeConverter(typeof(CustomEnumConverter<Direction>))]
	[JsonConverter(typeof(StringEnumConverter))]
	public enum Direction {
		/// <summary>
		///     Enum Up for up
		/// </summary>
		[EnumMember(Value = "up")] Up = 1,

		/// <summary>
		///     Enum Down for down
		/// </summary>
		[EnumMember(Value = "down")] Down = 2,

		/// <summary>
		///     Enum Left for left
		/// </summary>
		[EnumMember(Value = "left")] Left = 3,

		/// <summary>
		///     Enum Right for right
		/// </summary>
		[EnumMember(Value = "right")] Right = 4
	}

	static class DirectionExtension {
		public static Direction Rotate(this Direction toTransform, Rotation rotation) =>
			rotation switch {
				Rotation.Left  => RotateLeft(toTransform),
				Rotation.Right => RotateRight(toTransform),
				_              => throw new ArgumentOutOfRangeException(nameof(rotation), rotation, null)
			};

		private static Direction Inverse(this Direction dir) =>
			dir switch {
				Direction.Up    => Direction.Down,
				Direction.Left  => Direction.Right,
				Direction.Right => Direction.Left,
				Direction.Down  => Direction.Up,
				//should not be reachable
				_ => default
			};

		private static Direction RotateRight(this Direction dir) =>
			dir switch {
				Direction.Up    => Direction.Right,
				Direction.Left  => Direction.Up,
				Direction.Right => Direction.Down,
				Direction.Down  => Direction.Left,
				//should not be reachable
				_ => default
			};

		private static Direction RotateLeft(this Direction dir) =>
			dir switch {
				Direction.Up    => Direction.Left,
				Direction.Left  => Direction.Down,
				Direction.Right => Direction.Up,
				Direction.Down  => Direction.Right,
				//should not be reachable
				_ => default
			};

		public static Direction ResolveDirection(RelativeDirection direction, Direction orientation) =>
			direction switch {
				RelativeDirection.Forward   => orientation,
				RelativeDirection.Backwards => Inverse(orientation),
				RelativeDirection.Right     => RotateRight(orientation),
				_ /*Left*/                  => RotateLeft(orientation)
			};
	}
}