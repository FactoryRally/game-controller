/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	///     Checkpoints are entities
	/// </summary>
	[DataContract]
	public class Checkpoint : IEquatable<Checkpoint> {
		/// <summary>
		///     The number of the checkpoint defining the order they need to be called in
		/// </summary>
		/// <value>The number of the checkpoint defining the order they need to be called in</value>
		[DataMember(Name = "number", EmitDefaultValue = true)]
		public int Number { get; set; }

		/// <summary>
		///     The entities (robots) which allready were at this point
		/// </summary>
		/// <value>The entities (robots) which allready were at this point</value>
		[DataMember(Name = "checked-by", EmitDefaultValue = true)]
		public List<int> CheckedBy { get; set; }

		/// <summary>
		///     Gets or Sets Direction
		/// </summary>
		[Required]
		[DataMember(Name = "direction", EmitDefaultValue = true)]
		public Direction Direction { get; set; }

		/// <summary>
		///     The default rule for names in the game
		/// </summary>
		/// <value>The default rule for names in the game</value>
		[Required]
		[RegularExpression("[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}")]
		[StringLength(13, MinimumLength = 3)]
		[DataMember(Name                = "name", EmitDefaultValue = true)]
		public string Name { get; set; }

		/// <summary>
		///     The unique identification of this entity. &lt;br&gt; *!!!* This is not the id of the player&lt;br&gt; This value
		///     will be autogenerated by the api and is read only
		/// </summary>
		/// <value>
		///     The unique identification of this entity. &lt;br&gt; *!!!* This is not the id of the player&lt;br&gt; This value
		///     will be autogenerated by the api and is read only
		/// </value>
		[DataMember(Name = "id", EmitDefaultValue = true)]
		public int Id { get; set; }

		/// <summary>
		///     Gets or Sets Location
		/// </summary>
		[Required]
		[DataMember(Name = "location", EmitDefaultValue = true)]
		public Position Location { get; set; }

		/// <summary>
		///     Returns true if Checkpoint instances are equal
		/// </summary>
		/// <param name="other">Instance of Checkpoint to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Checkpoint other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Number == other.Number ||
					Number.Equals(other.Number)
				) &&
				(
					CheckedBy == other.CheckedBy ||
					CheckedBy       != null &&
					other.CheckedBy != null &&
					CheckedBy.SequenceEqual(other.CheckedBy)
				) &&
				(
					Direction == other.Direction ||
					Direction.Equals(other.Direction)
				) &&
				(
					Name == other.Name ||
					Name != null &&
					Name.Equals(other.Name)
				) &&
				(
					Id == other.Id ||
					Id.Equals(other.Id)
				) &&
				(
					Location == other.Location ||
					Location != null &&
					Location.Equals(other.Location)
				);
		}

		/// <summary>
		///     Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			StringBuilder sb = new StringBuilder();
			sb.Append("class Checkpoint {\n");
			sb.Append("  Number: ").Append(Number).Append("\n");
			sb.Append("  CheckedBy: ").Append(CheckedBy).Append("\n");
			sb.Append("  Direction: ").Append(Direction).Append("\n");
			sb.Append("  Name: ").Append(Name).Append("\n");
			sb.Append("  Id: ").Append(Id).Append("\n");
			sb.Append("  Location: ").Append(Location).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		///     Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

		/// <summary>
		///     Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Checkpoint) obj);
		}

		/// <summary>
		///     Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				// Suitable nullity checks etc, of course :)

				hashCode = hashCode * 59 + Number.GetHashCode();
				if (CheckedBy != null)
					hashCode = hashCode * 59 + CheckedBy.GetHashCode();

				hashCode = hashCode * 59 + Direction.GetHashCode();
				if (Name != null)
					hashCode = hashCode * 59 + Name.GetHashCode();

				hashCode = hashCode * 59 + Id.GetHashCode();
				if (Location != null)
					hashCode = hashCode * 59 + Location.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(Checkpoint left, Checkpoint right) => Equals(left, right);

		public static bool operator !=(Checkpoint left, Checkpoint right) => !Equals(left, right);

		#pragma warning restore 1591

		#endregion Operators
	}
}