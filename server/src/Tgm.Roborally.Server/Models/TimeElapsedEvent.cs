/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.9.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Engine;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	///     A timer run out
	/// </summary>
	[DataContract]
	public class TimeElapsedEvent : IEquatable<TimeElapsedEvent>, Event {
		/// <summary>
		///     The duration of the timer
		/// </summary>
		/// <value>The duration of the timer </value>
		[Required]
		[DataMember(Name = "original_duration", EmitDefaultValue = true)]
		public int OriginalDuration { get; set; }

		/// <summary>
		///     (optional) information about the elapsed timer
		/// </summary>
		/// <value>(optional) information about the elapsed timer</value>
		[DataMember(Name = "context", EmitDefaultValue = true)]
		public object Context { get; set; }

		public EventType GetEventType() => EventType.TimeElapsed;

		/// <summary>
		///     Returns true if TimeElapsedEvent instances are equal
		/// </summary>
		/// <param name="other">Instance of TimeElapsedEvent to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(TimeElapsedEvent other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					OriginalDuration == other.OriginalDuration ||
					OriginalDuration.Equals(other.OriginalDuration)
				) &&
				(
					Context == other.Context ||
					Context != null &&
					Context.Equals(other.Context)
				);
		}

		/// <summary>
		///     Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			StringBuilder sb = new StringBuilder();
			sb.Append("class TimeElapsedEvent {\n");
			sb.Append("  OriginalDuration: ").Append(OriginalDuration).Append("\n");
			sb.Append("  Context: ").Append(Context).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		///     Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

		/// <summary>
		///     Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((TimeElapsedEvent) obj);
		}

		/// <summary>
		///     Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				// Suitable nullity checks etc, of course :)

				hashCode = hashCode * 59 + OriginalDuration.GetHashCode();
				if (Context != null)
					hashCode = hashCode * 59 + Context.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(TimeElapsedEvent left, TimeElapsedEvent right) => Equals(left, right);

		public static bool operator !=(TimeElapsedEvent left, TimeElapsedEvent right) => !Equals(left, right);

		#pragma warning restore 1591

		#endregion Operators
	}
}