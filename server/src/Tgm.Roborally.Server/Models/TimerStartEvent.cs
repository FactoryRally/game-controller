/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.15.1
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Converters;
using Tgm.Roborally.Server.Engine;

namespace Tgm.Roborally.Server.Models
{ 
	/// <summary>
	/// Called when a timer is started
	/// </summary>
	[DataContract]
	public partial class TimerStartEvent : IEquatable<TimerStartEvent>, Event {

		/// <summary>
		/// Describes the usage of the timer
		/// </summary>
		/// <value>Describes the usage of the timer</value>
		[TypeConverter(typeof(CustomEnumConverter<SubjectEnum>))]
		[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public enum SubjectEnum
		{
			
			/// <summary>
			/// Enum BuyUpgrades for buy_upgrades
			/// </summary>
			[EnumMember(Value = "buy_upgrades")]
			BuyUpgrades = 1
		}

		/// <summary>
		/// Describes the usage of the timer
		/// </summary>
		/// <value>Describes the usage of the timer</value>
		[Required]
		[DataMember(Name="subject", EmitDefaultValue=false)]
		public SubjectEnum Subject { get; set; }

		/// <summary>
		/// The time in ms since epoche when the timer will ends
		/// </summary>
		/// <value>The time in ms since epoche when the timer will ends</value>
		[Required]
		[DataMember(Name="end_time", EmitDefaultValue=false)]
		public long EndTime { get; set; }

		/// <summary>
		/// the duration of the timer in ms
		/// </summary>
		/// <value>the duration of the timer in ms</value>
		[Required]
		[DataMember(Name="duration", EmitDefaultValue=false)]
		public int Duration { get; set; } = 20000;

		/// <summary>
		/// if this is true the active player can pass the event
		/// </summary>
		/// <value>if this is true the active player can pass the event</value>
		[Required]
		[DataMember(Name="passable", EmitDefaultValue=false)]
		public bool Passable { get; set; } = false;

		/// <summary>
		/// The entites that are able to act during this timer
		/// </summary>
		/// <value>The entites that are able to act during this timer</value>
		[Required]
		[DataMember(Name="robots_active", EmitDefaultValue=false)]
		public List<int> RobotsActive { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class TimerStartEvent {\n");
			sb.Append("  Subject: ").Append(Subject).Append("\n");
			sb.Append("  EndTime: ").Append(EndTime).Append("\n");
			sb.Append("  Duration: ").Append(Duration).Append("\n");
			sb.Append("  Passable: ").Append(Passable).Append("\n");
			sb.Append("  RobotsActive: ").Append(RobotsActive).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		public EventType GetEventType() => EventType.TimerStart;

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((TimerStartEvent)obj);
		}

		/// <summary>
		/// Returns true if TimerStartEvent instances are equal
		/// </summary>
		/// <param name="other">Instance of TimerStartEvent to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(TimerStartEvent other)
		{
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return 
				(
					Subject == other.Subject ||
					
					Subject.Equals(other.Subject)
				) && 
				(
					EndTime == other.EndTime ||
					
					EndTime.Equals(other.EndTime)
				) && 
				(
					Duration == other.Duration ||
					
					Duration.Equals(other.Duration)
				) && 
				(
					Passable == other.Passable ||
					
					Passable.Equals(other.Passable)
				) && 
				(
					RobotsActive == other.RobotsActive ||
					RobotsActive != null &&
					other.RobotsActive != null &&
					RobotsActive.SequenceEqual(other.RobotsActive)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
					
					hashCode = hashCode * 59 + Subject.GetHashCode();
					
					hashCode = hashCode * 59 + EndTime.GetHashCode();
					
					hashCode = hashCode * 59 + Duration.GetHashCode();
					
					hashCode = hashCode * 59 + Passable.GetHashCode();
					if (RobotsActive != null)
					hashCode = hashCode * 59 + RobotsActive.GetHashCode();
				return hashCode;
			}
		}

		#region Operators
		#pragma warning disable 1591

		public static bool operator ==(TimerStartEvent left, TimerStartEvent right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(TimerStartEvent left, TimerStartEvent right)
		{
			return !Equals(left, right);
		}

		#pragma warning restore 1591
		#endregion Operators
	}
}
