/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	///     Describes a point in a 2D system, without decimals
	/// </summary>
	[DataContract]
	public class Position : IEquatable<Position> {
		public Position(in int x, in int y) {
			X = x;
			Y = y;
		}

		/// <summary>
		///     The X cordinate
		/// </summary>
		/// <value>The X cordinate</value>
		[Required]
		[DataMember(Name = "x", EmitDefaultValue = false)]
		public int X { get; set; }

		/// <summary>
		///     Position on the Y axis (top-down on screen)
		/// </summary>
		/// <value>Position on the Y axis (top-down on screen)</value>
		[Required]
		[DataMember(Name = "y", EmitDefaultValue = false)]
		public int Y { get; set; }

		/// <summary>
		///     Returns true if Position instances are equal
		/// </summary>
		/// <param name="other">Instance of Position to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Position other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					X == other.X ||
					X.Equals(other.X)
				) &&
				(
					Y == other.Y ||
					Y.Equals(other.Y)
				);
		}

		/// <summary>
		///     Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			StringBuilder sb = new StringBuilder();
			sb.Append("class Position {\n");
			sb.Append("  X: ").Append(X).Append("\n");
			sb.Append("  Y: ").Append(Y).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		///     Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

		/// <summary>
		///     Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Position) obj);
		}

		/// <summary>
		///     Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				// Suitable nullity checks etc, of course :)

				hashCode = hashCode * 59 + X.GetHashCode();

				hashCode = hashCode * 59 + Y.GetHashCode();
				return hashCode;
			}
		}
		/// <summary>
		/// Generates a translated Position.
		/// </summary>
		/// <param name="amount"> the ammount to translate by</param>
		/// <param name="resultDirection"> the direction to translate into</param>
		/// <returns>a translated copy of this position</returns>
		/// <exception cref="ArgumentOutOfRangeException"></exception>
		public Position Translate(int amount, Direction resultDirection) {
			Position endPos = new Position(X, Y);
			switch (resultDirection) {
				case Direction.Up:
					endPos.Y -= amount;
					break;
				case Direction.Down:
					endPos.Y += amount;
					break;
				case Direction.Left:
					endPos.X -= amount;
					break;
				case Direction.Right:
					endPos.X += amount;
					break;
				default:
					throw new ArgumentOutOfRangeException(nameof(resultDirection), resultDirection, null);
			}

			return endPos;
		}
		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(Position left, Position right) => Equals(left, right);

		public static bool operator !=(Position left, Position right) => !Equals(left, right);

		#pragma warning restore 1591

		#endregion Operators
	}
}