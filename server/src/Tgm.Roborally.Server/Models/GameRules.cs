/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Converters;

namespace Tgm.Roborally.Server.Models
{ 
    /// <summary>
    /// Game Rules define the rules for a Game
    /// </summary>
    [DataContract]
    public partial class GameRules : IEquatable<GameRules>
    {
        /// <summary>
        /// If true players can see the name of the player controlling a robot
        /// </summary>
        /// <value>If true players can see the name of the player controlling a robot</value>
        [DataMember(Name="player-names-visible", EmitDefaultValue=false)]
        public bool PlayerNamesVisible { get; set; } = true;

        /// <summary>
        /// If true wholes will spaw on the map
        /// </summary>
        /// <value>If true wholes will spaw on the map</value>
        [DataMember(Name="wholes", EmitDefaultValue=false)]
        public bool Wholes { get; set; } = true;

        /// <summary>
        /// The maximum ammount of players able to join the game
        /// </summary>
        /// <value>The maximum ammount of players able to join the game</value>
        [Range(1, 10)]
        [DataMember(Name="max-players", EmitDefaultValue=false)]
        public int MaxPlayers { get; set; } = 4;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameRules {\n");
            sb.Append("  PlayerNamesVisible: ").Append(PlayerNamesVisible).Append("\n");
            sb.Append("  Wholes: ").Append(Wholes).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GameRules)obj);
        }

        /// <summary>
        /// Returns true if GameRules instances are equal
        /// </summary>
        /// <param name="other">Instance of GameRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameRules other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PlayerNamesVisible == other.PlayerNamesVisible ||
                    
                    PlayerNamesVisible.Equals(other.PlayerNamesVisible)
                ) && 
                (
                    Wholes == other.Wholes ||
                    
                    Wholes.Equals(other.Wholes)
                ) && 
                (
                    MaxPlayers == other.MaxPlayers ||
                    
                    MaxPlayers.Equals(other.MaxPlayers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + PlayerNamesVisible.GetHashCode();
                    
                    hashCode = hashCode * 59 + Wholes.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxPlayers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GameRules left, GameRules right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GameRules left, GameRules right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
