/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Converters;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	/// A named value. A pair of an index and value. (Part of a map)
	/// </summary>
	[DataContract]
	public partial class Pair : IEquatable<Pair> {
		public Pair(string fields, int i) {
			Name  = fields;
			Value = i;
		}

		/// <summary>
		/// The name the value is bound to
		/// </summary>
		/// <value>The name the value is bound to</value>
		[Required]
		[MinLength(1)]
		[DataMember(Name = "name", EmitDefaultValue = false)]
		public string Name { get; set; }

		/// <summary>
		/// The value behind the name. Can be null
		/// </summary>
		/// <value>The value behind the name. Can be null</value>
		[DataMember(Name = "value", EmitDefaultValue = false)]
		public int Value { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			var sb = new StringBuilder();
			sb.Append("class Pair {\n");
			sb.Append("  Name: ").Append(Name).Append("\n");
			sb.Append("  Value: ").Append(Value).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() {
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Pair) obj);
		}

		/// <summary>
		/// Returns true if Pair instances are equal
		/// </summary>
		/// <param name="other">Instance of Pair to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Pair other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Name == other.Name ||
					Name != null &&
					Name.Equals(other.Name)
				) &&
				(
					Value == other.Value ||
					Value.Equals(other.Value)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (Name != null)
					hashCode = hashCode * 59 + Name.GetHashCode();

				hashCode = hashCode * 59 + Value.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(Pair left, Pair right) {
			return Equals(left, right);
		}

		public static bool operator !=(Pair left, Pair right) {
			return !Equals(left, right);
		}

		#pragma warning restore 1591

		#endregion Operators
	}
}