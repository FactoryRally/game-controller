/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Converters;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	/// Describes the event when the game is paused or unpaused
	/// </summary>
	[DataContract]
	public partial class PauseEvent : IEquatable<PauseEvent> {
		/// <summary>
		/// Gets or Sets State
		/// </summary>
		[TypeConverter(typeof(CustomEnumConverter<StateEnum>))]
		[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public enum StateEnum {
			/// <summary>
			/// Enum UNPAUSE for UNPAUSE
			/// </summary>
			[EnumMember(Value = "UNPAUSE")] UNPAUSE = 1,

			/// <summary>
			/// Enum PAUSE for PAUSE
			/// </summary>
			[EnumMember(Value = "PAUSE")] PAUSE = 2
		}

		/// <summary>
		/// Gets or Sets State
		/// </summary>
		[DataMember(Name = "state", EmitDefaultValue = false)]
		public StateEnum State { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			var sb = new StringBuilder();
			sb.Append("class PauseEvent {\n");
			sb.Append("  State: ").Append(State).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() {
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((PauseEvent) obj);
		}

		/// <summary>
		/// Returns true if PauseEvent instances are equal
		/// </summary>
		/// <param name="other">Instance of PauseEvent to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(PauseEvent other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					State == other.State ||
					State.Equals(other.State)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)

				hashCode = hashCode * 59 + State.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(PauseEvent left, PauseEvent right) {
			return Equals(left, right);
		}

		public static bool operator !=(PauseEvent left, PauseEvent right) {
			return !Equals(left, right);
		}

		#pragma warning restore 1591

		#endregion Operators
	}
}