/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.4.1b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Tgm.Roborally.Server.Models {
	/// <summary>
	///     A queued action. Actions are executed in their adding sequence which is represented by their index
	/// </summary>
	[DataContract]
	public class Action : IEquatable<Action> {
		/// <summary>
		///     The queue index of the action
		/// </summary>
		/// <value>The queue index of the action</value>
		[DataMember(Name = "index", EmitDefaultValue = true)]
		public int Index { get; set; }

		/// <summary>
		///     Gets or Sets Type
		/// </summary>
		[DataMember(Name = "type", EmitDefaultValue = true)]
		public ActionType Type { get; set; }

		/// <summary>
		///     true if the action was allready executed
		/// </summary>
		/// <value>true if the action was allready executed</value>
		[DataMember(Name = "executed", EmitDefaultValue = true)]
		public bool Executed { get; set; }

		/// <summary>
		///     The index of the player this instruction came from
		/// </summary>
		/// <value>The index of the player this instruction came from</value>
		[DataMember(Name = "requestor", EmitDefaultValue = true)]
		public int Requestor { get; set; }

		/// <summary>
		///     Returns true if Action instances are equal
		/// </summary>
		/// <param name="other">Instance of Action to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Action other) {
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Index == other.Index ||
					Index.Equals(other.Index)
				) &&
				(
					Type == other.Type ||
					Type.Equals(other.Type)
				) &&
				(
					Executed == other.Executed ||
					Executed.Equals(other.Executed)
				) &&
				(
					Requestor == other.Requestor ||
					Requestor.Equals(other.Requestor)
				);
		}

		/// <summary>
		///     Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString() {
			StringBuilder sb = new StringBuilder();
			sb.Append("class Action {\n");
			sb.Append("  Index: ").Append(Index).Append("\n");
			sb.Append("  Type: ").Append(Type).Append("\n");
			sb.Append("  Executed: ").Append(Executed).Append("\n");
			sb.Append("  Requestor: ").Append(Requestor).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		///     Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

		/// <summary>
		///     Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj) {
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Action) obj);
		}

		/// <summary>
		///     Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode() {
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				// Suitable nullity checks etc, of course :)

				hashCode = hashCode * 59 + Index.GetHashCode();

				hashCode = hashCode * 59 + Type.GetHashCode();

				hashCode = hashCode * 59 + Executed.GetHashCode();

				hashCode = hashCode * 59 + Requestor.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

		#pragma warning disable 1591

		public static bool operator ==(Action left, Action right) => Equals(left, right);

		public static bool operator !=(Action left, Action right) => !Equals(left, right);

		#pragma warning restore 1591

		#endregion Operators
	}
}