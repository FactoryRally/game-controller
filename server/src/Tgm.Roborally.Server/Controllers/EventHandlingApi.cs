/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Tgm.Roborally.Server.Attributes;
using Microsoft.AspNetCore.Authorization;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventHandlingApiController : ControllerBase
    { 
        /// <summary>
        /// Get next / last damage event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/damage")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextDamageEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(DamageEvent), description: "OK")]
        public virtual IActionResult FetchNextDamageEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DamageEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"ammount\" : 3,\r\n  \"entity\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DamageEvent>(exampleJson)
            : default(DamageEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last Lazer hit event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/lazer-hit")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextLazerHitEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(LazerHitEvent), description: "OK")]
        public virtual IActionResult FetchNextLazerHitEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LazerHitEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"id\" : \"id\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LazerHitEvent>(exampleJson)
            : default(LazerHitEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last map event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/map")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextMapEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(MapEvent), description: "OK")]
        public virtual IActionResult FetchNextMapEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MapEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{ }";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MapEvent>(exampleJson)
            : default(MapEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last movement event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/movement")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextMovementEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(MovementEvent), description: "OK")]
        public virtual IActionResult FetchNextMovementEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MovementEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"movement-ammount\" : 30,\r\n  \"rotation-times\" : 0,\r\n  \"from\" : {\r\n    \"x\" : 1,\r\n    \"y\" : 5\r\n  },\r\n  \"to\" : {\r\n    \"x\" : 1,\r\n    \"y\" : 5\r\n  },\r\n  \"entity\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MovementEvent>(exampleJson)
            : default(MovementEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last push event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/push")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextPushEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(PushEvent), description: "OK")]
        public virtual IActionResult FetchNextPushEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PushEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"pusher-id\" : 0,\r\n  \"pushed-id\" : 0,\r\n  \"ammount\" : 1\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PushEvent>(exampleJson)
            : default(PushEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last shoot event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/shoot")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextShootEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(ShootEvent), description: "OK")]
        public virtual IActionResult FetchNextShootEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ShootEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"shooter\" : 0,\r\n  \"to\" : {\r\n    \"x\" : 1,\r\n    \"y\" : 5\r\n  },\r\n  \"hit-entitys\" : [ null, null ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ShootEvent>(exampleJson)
            : default(ShootEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get next / last shutdown event
        /// </summary>
        /// <remarks>Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">No unfetched event</response>
        /// <response code="417">The next event is not a movement event</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/shutdown")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("FetchNextShutdownEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(ShutdownEvent), description: "OK")]
        public virtual IActionResult FetchNextShutdownEvent([FromRoute][Required]string gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ShutdownEvent));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 417 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(417);
            string exampleJson = null;
            exampleJson = "{\r\n  \"entity\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ShutdownEvent>(exampleJson)
            : default(ShutdownEvent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// trace event
        /// </summary>
        /// <remarks>All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)</remarks>
        /// <param name="gameId"></param>
        /// <param name="batch">If true you will get all past events at once</param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/events/type")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("TraceEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "OK")]
        public virtual IActionResult TraceEvent([FromRoute][Required]string gameId, [FromQuery]bool batch, [FromQuery]bool wait)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            string exampleJson = null;
            exampleJson = "{ }";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            : default(InlineResponse200);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
