/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Tgm.Roborally.Server.Attributes;
using Microsoft.AspNetCore.Authorization;
using Tgm.Roborally.Server.Engine;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UpgradesApiController : ControllerBase
    { 
        /// <summary>
        /// Buy Upgrade
        /// </summary>
        /// <remarks>Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one</remarks>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        [HttpPatch]
        [Route("/v1/games/{game_id}/upgrades/shop")]
        [ValidateModelState]
        [SwaggerOperation("BuyUpgrade")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Not Found")]
        public virtual IActionResult BuyUpgrade([FromRoute(Name = "game_id")][Required][Range(0, 2048)]int gameId, [FromQuery][Required()][Range(0, 10000)]int upgrade, [FromQuery][Range(0, 10000)]int exchange)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));

            throw new NotImplementedException();
        }

        /// <summary>
        /// get all Upgrades
        /// </summary>
        /// <remarks>Returns a list of all Upgrade IDs</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/upgrades/")]
        [ValidateModelState]
        [SwaggerOperation("GetAllUpgradeIDs")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<int>), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Not Found")]
        public virtual IActionResult GetAllUpgradeIDs([FromRoute(Name = "game_id")][Required][Range(0, 2048)]int gameId) {
            return new GameRequestPipeline()
                   .game(gameId)
                   .compute(c => {
                       c.Response = new ObjectResult(c.Game.Upgrades.Ids);
                   }).executeSecure();
        }

        /// <summary>
        /// Get upgrade information
        /// </summary>
        /// <remarks>Get detailed information about the Upgrade</remarks>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/upgrades/{upgrade_id}")]
        [ValidateModelState]
        [SwaggerOperation("GetUpgradeInformation")]
        [SwaggerResponse(statusCode: 200, type: typeof(Upgrade), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Not Found")]
        public virtual IActionResult GetUpgradeInformation([FromRoute(Name = "game_id")][Required][Range(0, 2048)]int gameId, [FromRoute(Name = "upgrade_id")][Required][Range(0, 10000)]int upgradeId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Upgrade));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\r\n  \"cost\" : 0,\r\n  \"permanent\" : true,\r\n  \"values\" : [ {\r\n    \"name\" : \"name\",\r\n    \"value\" : 1\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"value\" : 1\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"value\" : 1\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"value\" : 1\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"value\" : 1\r\n  } ],\r\n  \"name\" : \"Penetration Lazer Mk.2\",\r\n  \"description\" : \"null\",\r\n  \"id\" : 5962,\r\n  \"rounds\" : 6\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Upgrade>(exampleJson)
            : default(Upgrade);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get upgrade shop
        /// </summary>
        /// <remarks>Retuns a list of all cards in the upgrade shop</remarks>
        /// <param name="gameId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/upgrades/shop")]
        [ValidateModelState]
        [SwaggerOperation("GetUpgradeShop")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpgradeShop), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Not Found")]
        public virtual IActionResult GetUpgradeShop([FromRoute(Name = "game_id")][Required][Range(0, 2048)]int gameId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpgradeShop));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\r\n  \"information\" : {\r\n    \"open\" : true\r\n  },\r\n  \"upgrades\" : [ null, null, null, null, null ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpgradeShop>(exampleJson)
            : default(UpgradeShop);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
