/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Tgm.Roborally.Server.Attributes;
using Tgm.Roborally.Server.Authentication;
using Tgm.Roborally.Server.Engine;
using Tgm.Roborally.Server.Engine.Exceptions;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Controllers {
	/// <summary>
	/// </summary>
	[ApiController]
	public class MapApiController : ControllerBase {
		/// <summary>
		///     Get Map
		/// </summary>
		/// <remarks>Returns the map of this specific game including the tiles (data)</remarks>
		/// <param name="gameId"></param>
		/// <response code="200">OK</response>
		/// <response code="404">Not Found</response>
		/// <response code="500">Internal Server Error</response>
		[HttpGet]
		[Route("/v1/games/{game_id}/map")]
		[GameAuth(Role.PLAYER)]
		[ValidateModelState]
		[SwaggerOperation("GetGameMap")]
		[SwaggerResponse(200, type: typeof(Map), description: "OK")]
		public virtual IActionResult GetGameMap([FromRoute(Name = "game_id")] [Required] int gameId) =>
			new GameRequestPipeline()
				.Game(gameId)
				.FailIfNull(c => c.Game.Map,GameExceptions.MAP_NOT_EXISTING)
				.Compute(code: c => c.Game.Map.CalculateEmpty())
				.Compute(code: c => c.SetResponse(c.Game.Map))
				.ExecuteSecure();

		/// <summary>
		///     Get Map info
		/// </summary>
		/// <remarks>Get meta information abouzt the map of the game</remarks>
		/// <param name="gameId"></param>
		/// <response code="200">OK</response>
		/// <response code="404">Not Found</response>
		[HttpGet]
		[Route("/v1/games/{game_id}/map/info")]
		[ValidateModelState]
		[SwaggerOperation("GetMapInfo")]
		[GameAuth(Role.PLAYER)]
		[SwaggerResponse(200, type: typeof(MapInfo), description: "OK")]
		[SwaggerResponse(404, type: typeof(ErrorMessage), description: "Not Found")]
		public virtual IActionResult GetMapInfo([FromRoute(Name = "game_id")] [Required] [Range(0, 2048)]
												int gameId) =>
			new GameRequestPipeline()
				.Game(gameId)
				.Compute(code: c => c.SetResponse(c.Game.Map.Info))
				.ExecuteSecure();

		/// <summary>
		///     Get tile
		/// </summary>
		/// <remarks>Inspect a tile of the map</remarks>
		/// <param name="gameId"></param>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <response code="200">OK</response>
		/// <response code="404">Not Found</response>
		[HttpGet]
		[Route("/v1/games/{game_id}/map/tiles/{x}/{y}")]
		[GameAuth(Role.PLAYER)]
		[ValidateModelState]
		[SwaggerOperation("GetTile")]
		[SwaggerResponse(200, type: typeof(Tile), description: "OK")]
		[SwaggerResponse(404, type: typeof(ErrorMessage), description: "Not Found")]
		public virtual IActionResult GetTile([FromRoute(Name = "game_id")] [Required] [Range(0, 2048)]
											 int gameId, [FromRoute] [Required] int x, [FromRoute] [Required] int y) =>
			new GameRequestPipeline()
				.Game(gameId)
				.Compute(code: c => c.Game.Map.CalculateEmpty())
				.Compute(code: c => c.SetResponse(c.Game.Map[x, y]))
				.ExecuteSecure();
	}
}