/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.3.0b0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Tgm.Roborally.Server.Attributes;
using Tgm.Roborally.Server.Engine;
using Tgm.Roborally.Server.Engine.Exceptions;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Controllers {
	/// <summary>
	/// 
	/// </summary>
	[ApiController]
	public class ConsumerApiController : ControllerBase {
		/// <summary>
		/// Register Consumers
		/// </summary>
		/// <remarks>Add a consumer to create a *virtual* (*spectating*) player to consume events</remarks>
		/// <param name="gameId"></param>
		/// <param name="consumerRegistration">Information about the joining consumer</param>
		/// <response code="201">Created</response>
		/// <response code="410">Consumer count limit reached</response>
		[HttpPost]
		[Route("/v1/games/{game_id}/consumers")]
		[ValidateModelState]
		[SwaggerOperation("RegisterConsumer")]
		[SwaggerResponse(statusCode: 201, type: typeof(JoinResponse), description: "Created")]
		public virtual IActionResult RegisterConsumer([FromRoute(Name = "game_id")] [Required] [Range(0, 2048)]
													  int gameId,
													  [FromBody] ConsumerRegistration consumerRegistration) {
			return new GameRequestPipeline()
				   .game(gameId)
				   .compute(c => {
					   JoinResponse response = c.Game.RegisterConsumer(consumerRegistration);
					   if (response == null) {
						   c.Response = StatusCode(410);
					   }
					   else {
						   c.Response = new ObjectResult(response);
					   }
				   })
				   .executeAction();
		}
	}
}