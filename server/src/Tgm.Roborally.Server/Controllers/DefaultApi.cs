/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Tgm.Roborally.Server.Attributes;
using Microsoft.AspNetCore.Authorization;
using Tgm.Roborally.Server.Models;

namespace Tgm.Roborally.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>Stes the type of robot(s) the player is controlling</remarks>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player</param>
        /// <response code="200">OK</response>
        [HttpPatch]
        [Route("/v1/games/{game_id}/players/{player_id}")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("ChooseRobot")]
        public virtual IActionResult ChooseRobot([FromRoute][Required][Range(0, 2048)]int gameId, [FromRoute][Required][Range(0, 8)]int playerId, [FromBody]List<Robots> robots)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>Returns the status and info about the robot</remarks>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/games/{game_id}/entitys/robots/{robot_id}/info")]
        [Authorize(Policy = "Player-Token-Access")]
        [ValidateModelState]
        [SwaggerOperation("GetRobotStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(RobotInfo), description: "OK")]
        public virtual IActionResult GetRobotStats([FromRoute][Required]string gameId, [FromRoute][Required]string robotId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RobotInfo));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RobotInfo>(exampleJson)
            : default(RobotInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
