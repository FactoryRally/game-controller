{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "nbrugger@student.tgm.ac.at",
      "name" : "Nils Brugger"
    },
    "description" : "This api controlls the flow of a game and provides it's data.\nIt is desiged to be RESTfull so the structure works simmilar as file system.\nThe service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan",
    "license" : {
      "name" : "Apache 2.0"
    },
    "title" : "Robot Rally Game logic engine",
    "version" : "v2.10.1"
  },
  "servers" : [ {
    "description" : "Production",
    "url" : "http://game.host/v1"
  }, {
    "description" : "Debug",
    "url" : "http://localhost:5050/v1"
  } ],
  "tags" : [ {
    "description" : "All actions needed to interact with players.<br>Keep in mid that a player is *not* a robot",
    "name" : "Players"
  }, {
    "description" : "All actions needed to interact with the game itself and mostly to get information",
    "name" : "Game"
  }, {
    "description" : "All actions directly done with the robots and other robot related actions",
    "name" : "Robots"
  }, {
    "description" : "Buying and reading upgrades",
    "name" : "Upgrades"
  }, {
    "description" : "Iterct with the the map",
    "name" : "Map"
  }, {
    "description" : "Recive and react to events",
    "name" : "EventHandling"
  }, {
    "name" : "Consumer"
  } ],
  "paths" : {
    "/games/" : {
      "get" : {
        "description" : "Returns a list of all hosted games",
        "operationId" : "getGames",
        "parameters" : [ {
          "description" : "true: only return joinable games",
          "explode" : true,
          "in" : "query",
          "name" : "joinable",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "true: only display games with no password set",
          "explode" : true,
          "in" : "query",
          "name" : "unprotected",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/GameID"
                  },
                  "minItems" : 0,
                  "type" : "array",
                  "uniqueItems" : true
                }
              }
            },
            "description" : "OK"
          }
        },
        "summary" : "Get all games",
        "tags" : [ "Game" ]
      },
      "post" : {
        "description" : "Creates a random game by your defined rules",
        "operationId" : "createGame",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GameRules"
              }
            }
          },
          "description" : "*Optional*\nThis rules define how your game will behave"
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GameID"
                }
              }
            },
            "description" : "OK"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Create Game",
        "tags" : [ "Game" ]
      }
    },
    "/games/{game_id}/status" : {
      "get" : {
        "description" : "Returns the status of a game",
        "operationId" : "getGameState",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GameInfo"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "summary" : "Get game status",
        "tags" : [ "Game" ]
      }
    },
    "/games/{game_id}/actions" : {
      "get" : {
        "description" : "Get all (**not robot related**) actions comitted to this game.",
        "operationId" : "getActions",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "Defines wich entries to return",
          "explode" : true,
          "in" : "query",
          "name" : "mode",
          "required" : false,
          "schema" : {
            "default" : "ALL",
            "enum" : [ "PENDING", "EXECUTED", "ALL" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Action"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Get games actions",
        "tags" : [ "Game" ]
      },
      "put" : {
        "description" : "Queues an action to be executed",
        "operationId" : "commitAction",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "action",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ActionType"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Commit Action",
        "tags" : [ "Game" ]
      }
    },
    "/games/{game_id}/players/" : {
      "get" : {
        "description" : "Returns the index of all players",
        "operationId" : "getAllPlayers",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/PlayerID"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get all players",
        "tags" : [ "Players" ]
      },
      "post" : {
        "description" : "Join the given game.\nYou will get your ID by doing this, if you already in the game you can get your ID again if you lost it.<br>\nThe id is neccessary for any further API calls",
        "operationId" : "join",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "The password of the game if the lobby is password protected",
          "explode" : true,
          "in" : "query",
          "name" : "password",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "The name to be displayed as username",
          "explode" : true,
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/PlayerName"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JoinResponse"
                }
              }
            },
            "description" : "Joined"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Wrong/No password"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Joinable"
          }
        },
        "summary" : "Join game",
        "tags" : [ "Players" ]
      }
    },
    "/games/{game_id}/players/{player_id}" : {
      "delete" : {
        "description" : "Removes a player from the game. This can be done by the player itsself or by the host.",
        "operationId" : "kickPlayer",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the player to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "player_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/PlayerID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        }, {
          "admin-access" : [ ]
        } ],
        "summary" : "Remove Player",
        "tags" : [ "Players" ]
      },
      "get" : {
        "description" : "Get closer information about the player",
        "operationId" : "getPlayer",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the player to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "player_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/PlayerID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get player",
        "tags" : [ "Players" ]
      },
      "patch" : {
        "description" : "# DEPRECATET\n> This feature is useless in this version. It will be usefull in newer versions\n\nSets the type of robot(s) the player is controlling",
        "operationId" : "chooseRobot",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the player to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "player_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/PlayerID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/Robots"
                },
                "type" : "array"
              }
            }
          },
          "description" : "The robots assigned to the player"
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Set Robots",
        "tags" : [ "Players" ]
      }
    },
    "/games/{game_id}/upgrades/shop" : {
      "get" : {
        "description" : "Retuns a list of all cards in the upgrade shop",
        "operationId" : "getUpgradeShop",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpgradeShop"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get upgrade shop",
        "tags" : [ "Upgrades" ]
      }
    },
    "/games/{game_id}/upgrades/{upgrade_id}" : {
      "get" : {
        "description" : "Get detailed information about the Upgrade",
        "operationId" : "getUpgradeInformation",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "The id of the upgrade to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "upgrade_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Upgrade"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get upgrade information",
        "tags" : [ "Upgrades" ]
      }
    },
    "/games/{game_id}/upgrades/" : {
      "get" : {
        "description" : "Returns a list of all Upgrade IDs",
        "operationId" : "getAllUpgradeIDs",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/UpgradeID"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "get all Upgrades",
        "tags" : [ "Upgrades" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/registers" : {
      "delete" : {
        "description" : "Emptys all register of the robot",
        "operationId" : "clearRegisters",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "clear registers",
        "tags" : [ "Robots" ]
      },
      "get" : {
        "description" : "Returns the content of the registers",
        "operationId" : "getRegisters",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RobotCommand"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get register information",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/upgrades" : {
      "delete" : {
        "description" : "Removes all upgrades from a robot",
        "operationId" : "clearUpgrades",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Clear Robot Upgrades",
        "tags" : [ "Robots" ]
      },
      "get" : {
        "description" : "Returns the upgrades installed on the robot",
        "operationId" : "getInstalledUpgrades",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/UpgradeID"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Robot Upgrades",
        "tags" : [ "Robots" ]
      },
      "patch" : {
        "description" : "Removes a paticular upgrade from the robot",
        "operationId" : "removeRobotUpgrade",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        }, {
          "description" : "The id of the upgrade to remove",
          "explode" : true,
          "in" : "query",
          "name" : "upgrade",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Remove Upgrade",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/map/tiles/{x}/{y}" : {
      "get" : {
        "description" : "Inspect a tile of the map",
        "operationId" : "getTile",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "The x codinate of the tile",
          "explode" : false,
          "in" : "path",
          "name" : "x",
          "required" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "simple"
        }, {
          "description" : "The y codinate of the tile",
          "explode" : false,
          "in" : "path",
          "name" : "y",
          "required" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tile"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get tile",
        "tags" : [ "Map" ]
      }
    },
    "/games/{game_id}/map/info" : {
      "get" : {
        "description" : "Get meta information abouzt the map of the game",
        "operationId" : "getMapInfo",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MapInfo"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Map info",
        "tags" : [ "Map" ]
      }
    },
    "/games/{game_id}/map" : {
      "get" : {
        "description" : "Returns the map of this specific game including the tiles (data)",
        "operationId" : "getGameMap",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Map",
        "tags" : [ "Map" ]
      }
    },
    "/games/{game_id}/entities/robots/" : {
      "get" : {
        "description" : "Returns a list of all robot IDs in this game.\n> A robot is not a player as a player is able to controll multiple robots",
        "operationId" : "getRobots",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/EntityID"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get all robots",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/actions/avinable" : {
      "get" : {
        "description" : "Returns a list of EntityActionTypes which are possible to be executed at the moment.",
        "operationId" : "getPossibleActions",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/EntityEventOportunity"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Aviable actions",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/actions/stack/" : {
      "get" : {
        "description" : "Retuns a list od all actions in the stack",
        "operationId" : "getActionStack",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/EntityAction"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Robot action stack",
        "tags" : [ "Robots" ]
      },
      "post" : {
        "description" : "Adds an action to the stack. The stack is processed using *first in first out*",
        "operationId" : "doEntityAction",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EntityAction"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Add Entity Action to stack",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/info" : {
      "get" : {
        "description" : "Returns the status and info about the robot",
        "operationId" : "getRobotStats",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RobotInfo"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Robot Informations",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/events/type" : {
      "get" : {
        "description" : "All events needed by the client are accessible here. (Usefull for animations)\nMore about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)\n\n**This function only returns the type of the event you need to fetch the data seperately**\n> Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events--updates)",
        "operationId" : "traceEvent",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "If true you will get all past events at once\nIf false the list only contains the oldest unfetched event",
          "explode" : true,
          "in" : "query",
          "name" : "batch",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "If true the server will not responde until a event is added to the queue\n\nRrequires less traffic but might impacts the servers performance or cause timeouts at the client",
          "explode" : true,
          "in" : "query",
          "name" : "wait",
          "required" : true,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/EventType"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "trace event",
        "tags" : [ "EventHandling" ]
      }
    },
    "/maps/" : {
      "get" : {
        "description" : "Returns a list of all map names",
        "operationId" : "getMaps",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Name"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Get Map Names",
        "tags" : [ "Map Repo" ]
      },
      "post" : {
        "description" : "Saves a map to the repository",
        "operationId" : "saveMap",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Map"
              }
            }
          },
          "description" : "The map to save"
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Save Map",
        "tags" : [ "Map Repo" ]
      }
    },
    "/maps/{map_name}" : {
      "delete" : {
        "description" : "Delete a map by its name",
        "operationId" : "deleteMap",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "map_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Delete Map",
        "tags" : [ "Map Repo" ]
      },
      "get" : {
        "description" : "Get a map by its name",
        "operationId" : "getMap",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "map_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MapInfo"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "security" : [ {
          "admin-access" : [ ]
        } ],
        "summary" : "Get map",
        "tags" : [ "Map Repo" ]
      }
    },
    "/games/{game_id}/events/head" : {
      "get" : {
        "description" : "Returns the next unfetched event of the ***any*** type.",
        "operationId" : "fetchNextEvent",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericEvent"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "description" : "No unfetched event"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get next event",
        "tags" : [ "EventHandling" ]
      }
    },
    "/games/{game_id}/consumers" : {
      "post" : {
        "description" : "Add a consumer to create a *virtual* (*spectating*) player to consume events",
        "operationId" : "registerConsumer",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "example" : {
                  "value" : {
                    "name" : "Gameboard",
                    "description" : "Gameboard, to mirror the game in the real world with real robots. Just consumes /game/game_id/events/head"
                  }
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/ConsumerRegistration"
              }
            }
          },
          "description" : "Information about the joining consumer"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JoinResponse"
                }
              }
            },
            "description" : "Created"
          },
          "410" : {
            "description" : "Consumer count limit reached"
          }
        },
        "summary" : "Register Consumers",
        "tags" : [ "Consumer" ]
      }
    },
    "/games/{game_id}/statements" : {
      "get" : {
        "description" : "Returns the Programming cards in this game",
        "operationId" : "getProgrammingCards",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RobotCommand"
                  },
                  "type" : "array",
                  "uniqueItems" : false
                }
              }
            },
            "description" : "OK"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Programming cards",
        "tags" : [ "Game" ]
      },
      "head" : {
        "description" : "Get the ids of all programming cards avainable in this game",
        "operationId" : "getProgrammingCardIds",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/UpgradeID"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Programming Card IDs",
        "tags" : [ "Game" ]
      }
    },
    "/games/{game_id}/statements/{statement_id}" : {
      "get" : {
        "description" : "Get the programming card by id",
        "operationId" : "getProgrammingCard",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "The id of the programming card",
          "explode" : false,
          "in" : "path",
          "name" : "statement_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RobotCommand"
                }
              }
            },
            "description" : "OK"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Programming Card",
        "tags" : [ "Game" ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/registers/{register}" : {
      "get" : {
        "description" : "Returns the Programming card in the robots register",
        "operationId" : "getRegisterContent",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        }, {
          "description" : "The number of the register",
          "explode" : false,
          "in" : "path",
          "name" : "register",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "maximum" : 4,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RobotCommand"
                }
              }
            },
            "description" : "OK"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Get Register Content",
        "tags" : [ "Robots" ]
      },
      "put" : {
        "description" : "Changes the programming card of the robots register",
        "operationId" : "setRegister",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "the id of the robot to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "robot_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EntityID"
          },
          "style" : "simple"
        }, {
          "description" : "The number of the register",
          "explode" : false,
          "in" : "path",
          "name" : "register",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "maximum" : 4,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "simple"
        }, {
          "description" : "The Id of the statement to place here",
          "explode" : true,
          "in" : "query",
          "name" : "statement_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "form"
        } ],
        "responses" : {
          "201" : {
            "description" : "Changed"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "security" : [ {
          "player-auth" : [ ]
        } ],
        "summary" : "Set Register Content",
        "tags" : [ "Robots" ]
      }
    },
    "/games/{game_id}/upgrades/shop/{upgrade_id}" : {
      "patch" : {
        "description" : "Buy or exchange an upgrade",
        "operationId" : "buyUpgrade",
        "parameters" : [ {
          "description" : "The id of the game to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "game_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/GameID"
          },
          "style" : "simple"
        }, {
          "description" : "The id of the upgrade to interact with",
          "explode" : false,
          "in" : "path",
          "name" : "upgrade_id",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "simple"
        }, {
          "description" : "The id of the upgrade to exchange with. Set to null or leave empty for a regular purchase",
          "explode" : true,
          "in" : "query",
          "name" : "exchange",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/UpgradeID"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "The error message including a human readable description"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error-Message"
                }
              }
            },
            "description" : "The error message including a human readable description"
          }
        },
        "summary" : "Buy Upgrade",
        "tags" : [ "Upgrades" ]
      }
    }
  },
  "components" : {
    "examples" : { },
    "parameters" : {
      "game_id" : {
        "description" : "The id of the game to interact with",
        "explode" : false,
        "in" : "path",
        "name" : "game_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/GameID"
        },
        "style" : "simple"
      },
      "robot_id" : {
        "description" : "the id of the robot to interact with",
        "explode" : false,
        "in" : "path",
        "name" : "robot_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/EntityID"
        },
        "style" : "simple"
      },
      "player_id" : {
        "description" : "the id of the player to interact with",
        "explode" : false,
        "in" : "path",
        "name" : "player_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/PlayerID"
        },
        "style" : "simple"
      },
      "upgrade_id" : {
        "description" : "The id of the upgrade to interact with",
        "explode" : false,
        "in" : "path",
        "name" : "upgrade_id",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/UpgradeID"
        },
        "style" : "simple"
      }
    },
    "responses" : {
      "ErrorResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error-Message"
            }
          }
        },
        "description" : "The error message including a human readable description"
      }
    },
    "schemas" : {
      "Tile" : {
        "additionalProperties" : false,
        "description" : "A tile is a square at the Game field<br>\n**Note:** \n* `direction` is only aviable for belts\n* properties with a `rotator-` prefix are only aviable for rotator (parts)",
        "example" : {
          "level" : 1,
          "empty" : true
        },
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/TileType"
          },
          "empty" : {
            "description" : "If there is no player at the tile this is true",
            "type" : "boolean"
          },
          "direction" : {
            "$ref" : "#/components/schemas/Direction"
          },
          "rotator-direction" : {
            "$ref" : "#/components/schemas/Rotation"
          },
          "level" : {
            "default" : 1,
            "description" : "The height of the tile. 1 = default",
            "format" : "int32",
            "maximum" : 3,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "type" ],
        "title" : "Tile",
        "type" : "object",
        "x-tags" : [ "Map" ]
      },
      "TileType" : {
        "description" : "The type defines the function of a tile and how it is displayed. The behaviour is unknown to the client",
        "enum" : [ "normal", "rotator", "wall", "prio_core", "conveyor", "trap-door", "stomper", "radioactive", "repair site", "Button", "One Way Wall", "Puddle", "pit", "Ramp", "spawn", "checkpoint" ],
        "title" : "TileType",
        "type" : "string",
        "x-tags" : [ "Map" ]
      },
      "Direction" : {
        "default" : "up",
        "description" : "Defines a direction in a 2D system. the X and Y values can be defined by the client.",
        "enum" : [ "up", "down", "left", "right" ],
        "title" : "Direction",
        "type" : "string"
      },
      "RotatorPosition" : {
        "description" : "The rotator blocks consist of 4 blocks. This 4 blocks can be differenciated by this property",
        "enum" : [ "up_left", "up_right", "down_left", "down_right" ],
        "title" : "RotatorPosition",
        "type" : "string"
      },
      "Rotation" : {
        "default" : "left",
        "description" : "Defines wether to turn left or right",
        "enum" : [ "left", "right" ],
        "title" : "Rotation",
        "type" : "string"
      },
      "Entity" : {
        "additionalProperties" : false,
        "description" : "Describes a actor at the game board. Not to be confused with `Player` which is the person controlling the Entity.\n<br>\nthis will *most likely* be a player controlled robot but it also can be a AI controlled Entity or robot\n> We did use Entity instead of the word Robot or bot because the word *bot* is used for the AIs controlling the robot. And also because theoretial a entity can be a not robot entity",
        "properties" : {
          "direction" : {
            "$ref" : "#/components/schemas/Direction"
          },
          "name" : {
            "description" : "The default rule for names in the game",
            "example" : "Niton 1",
            "maxLength" : 13,
            "minLength" : 3,
            "pattern" : "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}",
            "title" : "Name",
            "type" : "string"
          },
          "id" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          },
          "location" : {
            "$ref" : "#/components/schemas/Position"
          }
        },
        "required" : [ "direction", "location", "name" ],
        "title" : "Entity",
        "type" : "object"
      },
      "GameRules" : {
        "description" : "Game Rules define the rules for a Game",
        "example" : {
          "password" : "QWer7zÜ",
          "max-players" : 1,
          "name" : "name",
          "player-names-visible" : true,
          "fill-with-bots" : false,
          "robots-per-player" : 2
        },
        "properties" : {
          "player-names-visible" : {
            "default" : true,
            "description" : "If true players can see the name of the player controlling a robot",
            "type" : "boolean"
          },
          "max-players" : {
            "default" : 4,
            "description" : "The maximum ammount of players able to join the game",
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer"
          },
          "name" : {
            "description" : "The visible name of the game",
            "maxLength" : 50,
            "minLength" : 3,
            "type" : "string"
          },
          "robots-per-player" : {
            "description" : "Defines the number of robots per player",
            "format" : "int32",
            "maximum" : 3,
            "minimum" : 1,
            "type" : "integer"
          },
          "password" : {
            "description" : "The password of a game",
            "example" : "QWer7zÜ",
            "format" : "password",
            "maxLength" : 18,
            "minLength" : 4,
            "title" : "Password",
            "type" : "string"
          },
          "fill-with-bots" : {
            "default" : false,
            "description" : "If true emply player slots are going to be filled up with AI enemys",
            "type" : "boolean"
          }
        },
        "required" : [ "name" ],
        "title" : "GameRules",
        "type" : "object"
      },
      "Game" : {
        "description" : "A Game is like a lobby, people can join/leave.<br>\nA Game is created by a host who does *not* needs to attend the game as a player but in the most cases he will.\nThis is *read-only*",
        "properties" : {
          "id" : {
            "description" : "**Unique**<br>\nThis is the parameter a game is identified by",
            "example" : 537,
            "format" : "int32",
            "maximum" : 2048,
            "minimum" : 0,
            "title" : "GameID",
            "type" : "integer"
          },
          "name" : {
            "description" : "The name is **unique** but it should ***not*** be used as identifer (it's not natively supportet)\nIt is used to display the game's name",
            "example" : "Nitons Game 1",
            "maxLength" : 20,
            "minLength" : 3,
            "pattern" : "[A-Za-z]+[A-Za-z0-9 _-]+",
            "type" : "string"
          },
          "players" : {
            "description" : "The list of players attending the game.\n(Only contains the name of the players)",
            "items" : {
              "$ref" : "#/components/schemas/PlayerID"
            },
            "minItems" : 0,
            "type" : "array"
          },
          "runtime_info" : {
            "$ref" : "#/components/schemas/GameState"
          }
        },
        "required" : [ "name" ],
        "title" : "Game",
        "type" : "object"
      },
      "GameID" : {
        "description" : "**Unique**<br>\nThis is the parameter a game is identified by",
        "example" : 537,
        "format" : "int32",
        "maximum" : 2048,
        "minimum" : 0,
        "title" : "GameID",
        "type" : "integer"
      },
      "Name" : {
        "description" : "The default rule for names in the game",
        "example" : "Niton 1",
        "maxLength" : 13,
        "minLength" : 3,
        "pattern" : "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}",
        "title" : "Name",
        "type" : "string"
      },
      "GameInfo" : {
        "description" : "Describes the current state of the game. It does not includes the gamedata (like players/poitions/field) but general information.\n\nThis is read only",
        "example" : {
          "hardware-compatible" : false,
          "executionInfo" : {
            "currentRegister" : 1,
            "currentRobot" : 5
          },
          "player-on-turn" : 3,
          "name" : "Niton 1",
          "max-players" : 1,
          "password-protected" : true,
          "passed-time" : 240,
          "current-players" : 6
        },
        "properties" : {
          "passed-time" : {
            "default" : -1,
            "description" : "The time passed since the game started in secconds. If the game is not started it will be `0`",
            "example" : 240,
            "format" : "int32",
            "minimum" : -1,
            "type" : "integer"
          },
          "state" : {
            "$ref" : "#/components/schemas/GameState"
          },
          "hardware-compatible" : {
            "default" : false,
            "description" : "Not every game can be connected to hardware (for example to many bots)\n\nIf this is true it means you can use this game with hardware",
            "type" : "boolean"
          },
          "player-on-turn" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "name" : {
            "description" : "The default rule for names in the game",
            "example" : "Niton 1",
            "maxLength" : 13,
            "minLength" : 3,
            "pattern" : "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}",
            "title" : "Name",
            "type" : "string"
          },
          "max-players" : {
            "description" : "The maximum count of players that can participate in this game",
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer"
          },
          "current-players" : {
            "description" : "The numbers of players in the game",
            "maximum" : 10,
            "minimum" : 0,
            "type" : "integer"
          },
          "executionInfo" : {
            "$ref" : "#/components/schemas/GameInfo_executionInfo"
          },
          "password-protected" : {
            "description" : "True if the game has a password in order to join\n",
            "type" : "boolean"
          }
        },
        "required" : [ "current-players", "executionInfo", "hardware-compatible", "max-players", "name", "passed-time", "password-protected", "player-on-turn", "state" ],
        "title" : "Game Info",
        "type" : "object"
      },
      "GameState" : {
        "description" : "The phase the game is currently in\n* `Lobby`: Players are able to join, Bots able to be added. Host can decide to start the game and leave the phase\n* `Planning`: **[BETA - Not in game]** Players can choose their type of robot/bots bots autopick\n* `Playing`: The game is running and the players can do interactions\n* `Break`: The game is paused by the host. Players can still do interactions but they wont be executed as long as the break lasts\n* `Finished` : The game is over and there is a winner. This is the time to save the game for a replay\n",
        "enum" : [ "LOBBY", "PLANNING", "PLAYING", "FINISHED", "BREAK" ],
        "title" : "GameStatus",
        "type" : "string"
      },
      "Password" : {
        "description" : "The password of a game",
        "example" : "QWer7zÜ",
        "format" : "password",
        "maxLength" : 18,
        "minLength" : 4,
        "title" : "Password",
        "type" : "string"
      },
      "Error-Message" : {
        "description" : "A message about that went wrong. Usefull to display users a short and usefull prompt",
        "properties" : {
          "message" : {
            "description" : "A short message describing what happened in human words",
            "type" : "string"
          },
          "error" : {
            "description" : "The error/exception",
            "type" : "string"
          }
        },
        "required" : [ "message" ],
        "title" : "ErrorMessage",
        "type" : "object"
      },
      "Action" : {
        "description" : "A queued action.\nActions are executed in their adding sequence which is represented by their index",
        "example" : {
          "index" : 0,
          "executed" : true,
          "requestor" : 6
        },
        "properties" : {
          "index" : {
            "description" : "The queue index of the action",
            "type" : "integer"
          },
          "type" : {
            "$ref" : "#/components/schemas/ActionType"
          },
          "executed" : {
            "description" : "true if the action was allready executed",
            "type" : "boolean"
          },
          "requestor" : {
            "description" : "The index of the player this instruction came from",
            "type" : "integer"
          }
        },
        "title" : "Action",
        "type" : "object"
      },
      "RoundPhase" : {
        "description" : "A round consits of 3 Phases each phase does different things\n* `Upgrade` : Purchase Upgrades with energy cubes\n* `Programming` : Programm your robot(s)\n* `Activation` : The robots execute their code",
        "enum" : [ "upgrade", "programming", "activation" ],
        "title" : "RoundPhase",
        "type" : "string"
      },
      "UpgradeShop" : {
        "description" : "A shop to buy upgrades from. Each element is buyable once and then vanishes from the list",
        "example" : {
          "information" : {
            "open" : true
          },
          "upgrades" : [ null, null, null, null, null ]
        },
        "properties" : {
          "upgrades" : {
            "items" : {
              "$ref" : "#/components/schemas/UpgradeID"
            },
            "maxItems" : 10,
            "minItems" : 3,
            "title" : "UpgradeShop",
            "type" : "array"
          },
          "information" : {
            "$ref" : "#/components/schemas/UpgradeShopInformation"
          }
        },
        "type" : "object"
      },
      "Upgrade" : {
        "additionalProperties" : false,
        "description" : "A upgrade is a module making a robot stronger",
        "example" : {
          "cost" : 0,
          "permanent" : true,
          "values" : [ {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          } ],
          "name" : "Penetration Lazer Mk.2",
          "description" : "null",
          "id" : 5962,
          "rounds" : 6
        },
        "minProperties" : 4,
        "properties" : {
          "cost" : {
            "default" : 2,
            "description" : "The energy cost to buy this upgrade",
            "maximum" : 5,
            "minimum" : 0,
            "type" : "integer"
          },
          "name" : {
            "description" : "The ame to display for this Upgrade. ***Not*** unique (identifying)",
            "example" : "Penetration Lazer Mk.2",
            "maxLength" : 27,
            "minLength" : 2,
            "type" : "string"
          },
          "permanent" : {
            "default" : true,
            "description" : "if true the card belongs to the player for the rest of the game",
            "type" : "boolean"
          },
          "description" : {
            "default" : "null",
            "description" : "A description about the effect of the card.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength" : 300,
            "type" : "string"
          },
          "rounds" : {
            "description" : "If the Upgrade is not permanent this variable defines the number of rounds this Upgrade works",
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer"
          },
          "values" : {
            "description" : "Defines number values for the upgrade.<br>Example:\nEffect: \"You have {registers} additonal Registers\"<br> `{registers}` is the number of the regsiters (that will be added) and the exact value will be defined in here (`values`)",
            "items" : {
              "$ref" : "#/components/schemas/Pair"
            },
            "maxItems" : 10,
            "type" : "array",
            "uniqueItems" : true
          },
          "type" : {
            "$ref" : "#/components/schemas/UpgradeType"
          },
          "id" : {
            "description" : "The id of an upgrade. **Unique**",
            "maximum" : 10000,
            "minimum" : 0,
            "title" : "UpgradeID",
            "type" : "integer"
          }
        },
        "required" : [ "cost", "name", "type" ],
        "title" : "Upgrade",
        "type" : "object"
      },
      "RobotCommand" : {
        "description" : "A command for a robot to execute",
        "example" : {
          "times" : 1,
          "name" : "Penetration Lazer Mk.2",
          "description" : "null",
          "parameters" : [ {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          }, {
            "name" : "name",
            "value" : 1
          } ]
        },
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/Instruction"
          },
          "parameters" : {
            "description" : "Defines parameters for the instruction.<br>Example:\nEffect: \"Move {steps} steps forward\"<br> `{steps}` is the number of steps the robot will do. And the exact value (of steps) will be defined in here (`values`)",
            "items" : {
              "$ref" : "#/components/schemas/Pair"
            },
            "maxItems" : 10,
            "type" : "array",
            "uniqueItems" : true
          },
          "description" : {
            "default" : "null",
            "description" : "A description about the effect of the command.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength" : 300,
            "type" : "string"
          },
          "name" : {
            "description" : "The ame to display for this Command. ***Not*** unique (identifying)",
            "example" : "Penetration Lazer Mk.2",
            "maxLength" : 27,
            "minLength" : 2,
            "type" : "string"
          },
          "times" : {
            "default" : 1,
            "description" : "Describes how often this command is going to be executed",
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "type" ],
        "title" : "RobotCommand",
        "type" : "object"
      },
      "Pair" : {
        "additionalProperties" : false,
        "description" : "A named value. A pair of an index and value. (Part of a map)",
        "example" : {
          "name" : "name",
          "value" : 1
        },
        "maxProperties" : 2,
        "minProperties" : 1,
        "properties" : {
          "name" : {
            "description" : "The name the value is bound to",
            "minLength" : 1,
            "type" : "string"
          },
          "value" : {
            "description" : "The value behind the name. Can be null",
            "type" : "integer"
          }
        },
        "required" : [ "name" ],
        "title" : "Pair",
        "type" : "object"
      },
      "UpgradeType" : {
        "description" : "Defines the type (the code/actions) this card will have\n* `generator` : Generates *x* energy every round",
        "enum" : [ "generator" ],
        "maxLength" : 300,
        "title" : "UpgradeType",
        "type" : "string"
      },
      "Instruction" : {
        "description" : "Defines what a command will do",
        "enum" : [ "move", "rotate" ],
        "title" : "Instruction",
        "type" : "string"
      },
      "Player" : {
        "additionalProperties" : false,
        "description" : "A player attending in a game.\n#### Warning\nThis is **not** permanent. It is created and removed with the game (or with you joining and leaving the game)",
        "example" : {
          "on-turn" : false,
          "controlled_entities" : [ null, null ],
          "active" : true,
          "id" : 3,
          "display_name" : "display_name"
        },
        "properties" : {
          "id" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "controlled_entities" : {
            "description" : "The list of entities controlled by this player",
            "items" : {
              "$ref" : "#/components/schemas/EntityID"
            },
            "minItems" : 1,
            "type" : "array",
            "uniqueItems" : true
          },
          "on-turn" : {
            "default" : false,
            "description" : "Îf this is true rhe player is able to interact at the moment",
            "type" : "boolean"
          },
          "active" : {
            "default" : true,
            "description" : "Defines if the player is actively playing. If this is false the player does random moves. This is only false if the player disconnects",
            "type" : "boolean"
          },
          "display_name" : {
            "description" : "The display name of a player including rules",
            "maxLength" : 30,
            "minLength" : 3,
            "pattern" : "[A-Za-z0-9_-]+",
            "title" : "PlayerName",
            "type" : "string"
          }
        },
        "required" : [ "controlled_entities", "display_name", "id" ],
        "title" : "Player",
        "type" : "object"
      },
      "PlayerID" : {
        "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
        "example" : 3,
        "maximum" : 8,
        "minimum" : 0,
        "title" : "PlayerID",
        "type" : "integer"
      },
      "EntityID" : {
        "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
        "format" : "int32",
        "minimum" : 0,
        "title" : "EntityID",
        "type" : "integer"
      },
      "Replay" : {
        "deprecated" : true,
        "description" : "## BETA (Adressed in V0.1.2)\nA replay consists of all data needed to replay a game. Means starting conditions and every change that was made",
        "title" : "Replay",
        "type" : "object"
      },
      "ActionType" : {
        "description" : "Defines what an action will do",
        "enum" : [ "PAUSE", "UNPAUSE", "START_GAME" ],
        "title" : "ActionType",
        "type" : "string"
      },
      "JoinResponse" : {
        "description" : "All the data you need as you joined a game.",
        "example" : {
          "pat" : "pat",
          "id" : 3
        },
        "properties" : {
          "id" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "pat" : {
            "description" : "The uid is the key for the joined player. You need this key for authentication",
            "type" : "string"
          }
        },
        "required" : [ "id", "pat" ],
        "title" : "JoinResponse",
        "type" : "object"
      },
      "UpgradeID" : {
        "description" : "The id of an upgrade. **Unique**",
        "maximum" : 10000,
        "minimum" : 0,
        "title" : "UpgradeID",
        "type" : "integer"
      },
      "UpgradeShopInformation" : {
        "example" : {
          "open" : true
        },
        "properties" : {
          "open" : {
            "default" : true,
            "description" : "if true you can buy uprades",
            "type" : "boolean"
          }
        },
        "title" : "UpgradeShopInformation",
        "type" : "object"
      },
      "EventType" : {
        "description" : "Describes what the event is about",
        "enum" : [ "movement", "upgrade purchase", "activate upgrade", "lazer shot", "game start", "clear shop", "fill shop", "programming timer start", "programming timer stop", "random card distribution", "take card event", "activate checkpoint", "game_phase_changed", "game_round_phase_changed", "pause", "unpause", "damage", "lazer hit", "push", "join", "lock in", "robot_start_executing", "heal", "energy gain", "map", "shutdown", "change register", "game end event", "clear register", "time elapsed", "map created", "upgrades discarded" ],
        "title" : "EventType",
        "type" : "string",
        "x-tags" : [ "EventHandling" ]
      },
      "MovementEvent" : {
        "description" : "Describes the movement of a entity",
        "properties" : {
          "entity" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "direction" : {
            "$ref" : "#/components/schemas/Direction"
          },
          "movement-ammount" : {
            "description" : "How far (in tiles) the movement was executed",
            "maximum" : 50,
            "minimum" : 0,
            "type" : "integer"
          },
          "rotation" : {
            "$ref" : "#/components/schemas/Rotation"
          },
          "rotation-times" : {
            "description" : "The number of times (90°) the robot turns",
            "maximum" : 2,
            "minimum" : 0,
            "type" : "integer"
          },
          "from" : {
            "$ref" : "#/components/schemas/Position"
          },
          "to" : {
            "$ref" : "#/components/schemas/Position"
          }
        },
        "title" : "MovementEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "Position" : {
        "description" : "Describes a point in a 2D system, without decimals",
        "example" : {
          "x" : 1,
          "y" : 5
        },
        "properties" : {
          "x" : {
            "description" : "The X cordinate",
            "multipleOf" : 1,
            "type" : "integer"
          },
          "y" : {
            "description" : "Position on the Y axis (top-down on screen)",
            "multipleOf" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "x", "y" ],
        "title" : "Position",
        "type" : "object"
      },
      "MapInfo" : {
        "description" : "Describes the map *without* the tiles",
        "example" : {
          "width" : 43,
          "name" : "Niton 1",
          "prioBeacon" : {
            "x" : 1,
            "y" : 5
          },
          "height" : 302
        },
        "properties" : {
          "width" : {
            "maximum" : 500,
            "minimum" : 4,
            "type" : "integer"
          },
          "height" : {
            "maximum" : 500,
            "minimum" : 4,
            "type" : "integer"
          },
          "prioBeacon" : {
            "$ref" : "#/components/schemas/Position"
          },
          "name" : {
            "description" : "The default rule for names in the game",
            "example" : "Niton 1",
            "maxLength" : 13,
            "minLength" : 3,
            "pattern" : "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}",
            "title" : "Name",
            "type" : "string"
          }
        },
        "title" : "MapInfo",
        "type" : "object",
        "x-tags" : [ "Map" ]
      },
      "PushEvent" : {
        "description" : "When entities push each other",
        "properties" : {
          "pusher-id" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "ammount" : {
            "description" : "The number of tiles the pushed entity is pushed",
            "minimum" : 1,
            "type" : "integer"
          },
          "push-directon" : {
            "$ref" : "#/components/schemas/Direction"
          },
          "pushed-id" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          }
        },
        "title" : "PushEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "ShootEvent" : {
        "description" : "Event if a player shoots a lazer",
        "properties" : {
          "shooter" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "direction" : {
            "$ref" : "#/components/schemas/Direction"
          },
          "to" : {
            "$ref" : "#/components/schemas/Position"
          },
          "hit-entitys" : {
            "description" : "The entitys hit by the ray",
            "items" : {
              "$ref" : "#/components/schemas/EntityID"
            },
            "minItems" : 0,
            "type" : "array",
            "uniqueItems" : true
          }
        },
        "title" : "ShootEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "DamageEvent" : {
        "description" : "Happens when a entity takes damage",
        "properties" : {
          "entity" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "ammount" : {
            "description" : "The number of damage points",
            "maximum" : 5,
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "title" : "DamageEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "MapEventType" : {
        "description" : "The event that occurs if the active map elements are activated",
        "enum" : [ "lazer", "rotator", "conveyor-belts", "stomper", "hole", "hole-trap", "pusher", "flamethrower", "portal", "toggle-ramps", "repair" ],
        "title" : "MapEventType",
        "type" : "string",
        "x-tags" : [ "EventHandling" ]
      },
      "MapEvent" : {
        "description" : "Events that takes place with the active components of the map",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/MapEventType"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          }
        },
        "title" : "MapEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "LazerHitEvent" : {
        "description" : "Called when a player is hit by an ",
        "properties" : {
          "id" : {
            "type" : "string"
          }
        },
        "title" : "LazerHitEvent",
        "type" : "object"
      },
      "ShutdownEvent" : {
        "description" : "When a robot reboots",
        "properties" : {
          "entity" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          }
        },
        "title" : "ShutdownEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "EntityAction" : {
        "description" : "The base type for entity actions between registers",
        "example" : { },
        "properties" : {
          "phase" : {
            "$ref" : "#/components/schemas/EntityActionPhase"
          },
          "type" : {
            "$ref" : "#/components/schemas/EntityActionType"
          }
        },
        "title" : "EntityAction",
        "type" : "object"
      },
      "EntityActionType" : {
        "default" : "none",
        "description" : "Defines the action itsselft (what the action is doing)\n\n`pass` means that nothing is done and the action wont happen\n\nIf a type starts with `edit` then all actions within the domain of the second word (eg. remove, add, change) are adressed",
        "enum" : [ "reboot", "use upgrade", "spider_jump", "Cache", "register-refresh", "storage-swap", "jumper", "teleporter", "magnet-ray", "pushray", "rotation", "sidekick", "pass", "buy upgrade", "edit register" ],
        "title" : "EntityActionType",
        "type" : "string"
      },
      "EntityActionPhase" : {
        "description" : "The moment at which a entity action can be performed",
        "enum" : [ "pre_register", "after_register" ],
        "title" : "EntityActionPhase",
        "type" : "string"
      },
      "EntityEventOportunity" : {
        "description" : "The oportunity to perfom an action / event",
        "example" : {
          "end-time" : 0,
          "time-left" : 1
        },
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/EntityActionType"
          },
          "time-left" : {
            "description" : "The time in ms left to do this action",
            "format" : "int64",
            "minimum" : 1,
            "type" : "integer"
          },
          "end-time" : {
            "description" : "The in most languages avinable system time in MS as of which the action cant be committed any more",
            "format" : "int64",
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "title" : "EntityEventOportunity",
        "type" : "object"
      },
      "SimpleUpgradeActivation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityAction"
        }, {
          "$ref" : "#/components/schemas/SimpleUpgradeActivation_allOf"
        } ],
        "description" : "type is allways `use-upgrade`",
        "title" : "SimpleUpgradeActivation"
      },
      "EntityUseUpgradeAction" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntityAction"
        }, {
          "$ref" : "#/components/schemas/SimpleUpgradeActivation_allOf"
        } ],
        "description" : "The action to make an entity use an upgade card (including the actions which require additional information)",
        "title" : "EntityUseUpgradeAction"
      },
      "Robots" : {
        "enum" : [ "dicer", "tank" ],
        "title" : "Robots",
        "type" : "string"
      },
      "RobotInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Entity"
        }, {
          "$ref" : "#/components/schemas/RobotInfo_allOf"
        } ],
        "description" : "Describes the state/stats of a robot",
        "title" : "RobotInfo"
      },
      "Checkpoint" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Checkpoint_allOf"
        }, {
          "$ref" : "#/components/schemas/Entity"
        } ],
        "description" : "Checkpoints are entities",
        "title" : "Checkpoint"
      },
      "PlayerAccessToken" : {
        "description" : "The token used to authorize a player",
        "maxLength" : 75,
        "minLength" : 10,
        "pattern" : "[A-Za-z0-9+*~-_=?]+",
        "title" : "PlayerAccessToken",
        "type" : "string"
      },
      "RobotPickEvent" : {
        "description" : "Triggered when a robot is assigned to a player",
        "properties" : {
          "player" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "robot" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          }
        },
        "title" : "RobotPickEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "Map" : {
        "description" : "The map including the tiles",
        "example" : {
          "rows" : [ [ {
            "level" : 1,
            "empty" : true
          }, {
            "level" : 1,
            "empty" : true
          } ], [ {
            "level" : 1,
            "empty" : true
          }, {
            "level" : 1,
            "empty" : true
          } ] ],
          "info" : {
            "width" : 43,
            "name" : "Niton 1",
            "prioBeacon" : {
              "x" : 1,
              "y" : 5
            },
            "height" : 302
          }
        },
        "properties" : {
          "info" : {
            "$ref" : "#/components/schemas/MapInfo"
          },
          "rows" : {
            "items" : {
              "items" : {
                "$ref" : "#/components/schemas/Tile"
              },
              "type" : "array"
            },
            "type" : "array"
          }
        },
        "title" : "Map",
        "type" : "object"
      },
      "GamePhaseChangedEvent" : {
        "description" : "When the next game phase started",
        "properties" : {
          "phase" : {
            "$ref" : "#/components/schemas/RoundPhase"
          },
          "step" : {
            "description" : "WIP!\nCurrently class names. Enum later on\n\nDescribes the game phase more deeply",
            "title" : "GamePhaseStep",
            "type" : "string"
          },
          "information" : {
            "description" : "Unspecified information about the game phase (you can also obtain this information in a typesave way using the GameAPI)",
            "type" : "object"
          }
        },
        "required" : [ "phase", "step" ],
        "title" : "GamePhaseChangedEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "GenericEvent" : {
        "description" : "Used to store any event and generalize them into a single type",
        "example" : {
          "data" : "{}"
        },
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/EventType"
          },
          "data" : {
            "description" : "This is the data for the Event. In the case of type beeing `lazer hit`, data will be of the type `LazerHitEvent`. So the object-type allways matches to the `type` field ",
            "type" : "object"
          }
        },
        "required" : [ "type" ],
        "title" : "GenericEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "PauseEvent" : {
        "description" : "Describes the event when the game is paused or unpaused",
        "properties" : {
          "state" : {
            "enum" : [ "UNPAUSE", "PAUSE" ],
            "type" : "string"
          }
        },
        "title" : "PauseEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "ActionEvent" : {
        "description" : "Describes an event from an action without additionaly information",
        "title" : "ActionEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "JoinEvent" : {
        "description" : "If somebody joins a game",
        "properties" : {
          "joined_id" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "unjoin" : {
            "description" : "True if the player left instead of joining",
            "type" : "boolean"
          }
        },
        "title" : "JoinEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "PlayerName" : {
        "description" : "The display name of a player including rules",
        "maxLength" : 30,
        "minLength" : 3,
        "pattern" : "[A-Za-z0-9_-]+",
        "title" : "PlayerName",
        "type" : "string"
      },
      "RobotStartExecEvent" : {
        "description" : "When a robot is about to execute a programming card/statement",
        "properties" : {
          "robot" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "card" : {
            "$ref" : "#/components/schemas/RobotCommand"
          },
          "register" : {
            "description" : "The index of the executed register",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "title" : "RobotStartExecEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "HealEvent" : {
        "description" : "When a robot is healed",
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/Entity"
          },
          "heal_amount" : {
            "exclusiveMinimum" : true,
            "maximum" : 100,
            "minimum" : 0,
            "multipleOf" : 1,
            "type" : "integer"
          }
        },
        "title" : "HealEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "EnergyGainEvent" : {
        "description" : "When a robot gains energy",
        "properties" : {
          "robot" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          },
          "ammount" : {
            "description" : "The ammount of energy gained",
            "exclusiveMinimum" : true,
            "maximum" : 10,
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "required" : [ "ammount", "robot" ],
        "title" : "EnergyGainEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "ConsumerRegistration" : {
        "description" : "Data to describe a consumer",
        "example" : {
          "name" : "Niton 1",
          "description" : "Gameboard, to mirror the game in the real world with real robots. Just consumes /game/game_id/events/head"
        },
        "properties" : {
          "name" : {
            "description" : "The default rule for names in the game",
            "example" : "Niton 1",
            "maxLength" : 13,
            "minLength" : 3,
            "pattern" : "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}",
            "title" : "Name",
            "type" : "string"
          },
          "description" : {
            "description" : "A description what the consumer is used for (and or is)",
            "example" : "Gameboard, to mirror the game in the real world with real robots. Just consumes /game/game_id/events/head",
            "maxLength" : 10000,
            "minLength" : 5,
            "type" : "string"
          }
        },
        "required" : [ "description", "name" ],
        "title" : "ConsumerRegistration",
        "type" : "object"
      },
      "RoundPhaseChangedEvent" : {
        "description" : "Occurs when the next phase of the round starts",
        "properties" : {
          "phase" : {
            "$ref" : "#/components/schemas/RoundPhase"
          }
        },
        "title" : "RoundPhaseChangedEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "PurchaseEvent" : {
        "description" : "The event that occurs if a player buys an upgrade",
        "properties" : {
          "player" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "upgrade" : {
            "description" : "The id of an upgrade. **Unique**",
            "maximum" : 10000,
            "minimum" : 0,
            "title" : "UpgradeID",
            "type" : "integer"
          }
        },
        "title" : "PurchaseEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "DrawCardEvent" : {
        "description" : "The event that occurs if a player gets his programming cards",
        "properties" : {
          "player" : {
            "description" : "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
            "example" : 3,
            "maximum" : 8,
            "minimum" : 0,
            "title" : "PlayerID",
            "type" : "integer"
          },
          "count" : {
            "description" : "The number of cards drawn",
            "example" : 8,
            "maximum" : 9,
            "minimum" : 0,
            "type" : "integer"
          },
          "cards" : {
            "description" : "The drawn cards. **This is only visible for the player himself**",
            "items" : {
              "$ref" : "#/components/schemas/UpgradeID"
            },
            "type" : "array"
          }
        },
        "required" : [ "count", "player" ],
        "title" : "DrawCardEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "ChangeRegisterEvent" : {
        "description" : "The event when a player places or removes an robot command from/to a register",
        "properties" : {
          "action" : {
            "enum" : [ "fill", "clear", "replace" ],
            "type" : "string"
          },
          "card" : {
            "description" : "The id of an upgrade. **Unique**",
            "maximum" : 10000,
            "minimum" : 0,
            "title" : "UpgradeID",
            "type" : "integer"
          },
          "register" : {
            "description" : "The changed register",
            "maximum" : 8,
            "minimum" : 0,
            "type" : "integer"
          }
        },
        "required" : [ "action", "register" ],
        "title" : "ChangeRegisterEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "ProgrammingTimerStartEvent" : {
        "properties" : {
          "seconds" : {
            "description" : "Time the timer will run for",
            "maximum" : 300,
            "minimum" : 3,
            "type" : "integer"
          },
          "end" : {
            "description" : "The time at which the timer ends. Given as `ms since epoche` [link](currentmillis.com)\n",
            "format" : "int64",
            "type" : "integer"
          }
        },
        "required" : [ "end", "seconds" ],
        "title" : "ProgrammingTimerStartEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "GameEndEvent" : {
        "description" : "The game is over",
        "properties" : {
          "winner" : {
            "$ref" : "#/components/schemas/Player"
          }
        },
        "required" : [ "winner" ],
        "title" : "GameEndEvent",
        "type" : "object",
        "x-tags" : [ "EventHandling" ]
      },
      "TimeElapsedEvent" : {
        "description" : "A timer run out",
        "properties" : {
          "original_duration" : {
            "description" : "The duration of the timer\n",
            "minimum" : 0,
            "type" : "integer"
          },
          "context" : {
            "description" : "(optional) information about the elapsed timer",
            "type" : "object"
          }
        },
        "required" : [ "original_duration" ],
        "title" : "TimeElapsedEvent",
        "type" : "object"
      },
      "GamePhaseStep" : {
        "description" : "WIP!\nCurrently class names. Enum later on\n\nDescribes the game phase more deeply",
        "title" : "GamePhaseStep",
        "type" : "string"
      },
      "DiscardUpgradesEvent" : {
        "description" : "This event is fired when a player exchanges or actively discards upgrades. The upgrades are removed from the game (but still accessible) ",
        "properties" : {
          "upgrades" : {
            "description" : "The list of upgrades discarded",
            "items" : {
              "$ref" : "#/components/schemas/UpgradeID"
            },
            "type" : "array"
          },
          "robot" : {
            "description" : "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
            "format" : "int32",
            "minimum" : 0,
            "title" : "EntityID",
            "type" : "integer"
          }
        },
        "title" : "DiscardUpgradesEvent",
        "type" : "object"
      },
      "EmptyEvent" : {
        "description" : "Event without data",
        "title" : "EmptyEvent",
        "type" : "object"
      },
      "DummyEvent" : {
        "title" : "DummyEvent",
        "type" : "object"
      },
      "GameInfo_executionInfo" : {
        "description" : "Information abou the executon cycle",
        "example" : {
          "currentRegister" : 1,
          "currentRobot" : 5
        },
        "properties" : {
          "currentRegister" : {
            "description" : "The index of the register currently executed",
            "type" : "integer"
          },
          "currentRobot" : {
            "description" : "The index of the robot currently executing",
            "type" : "integer"
          }
        },
        "required" : [ "currentRegister", "currentRobot" ]
      },
      "SimpleUpgradeActivation_allOf" : {
        "properties" : {
          "upgrade" : {
            "description" : "The id of an upgrade. **Unique**",
            "maximum" : 10000,
            "minimum" : 0,
            "title" : "UpgradeID",
            "type" : "integer"
          }
        }
      },
      "RobotInfo_allOf" : {
        "properties" : {
          "energy-cubes" : {
            "default" : 3,
            "description" : "The number of avainable energy cubes",
            "maximum" : 20,
            "minimum" : 0,
            "type" : "integer"
          },
          "health" : {
            "default" : 10,
            "description" : "The remaining health points",
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer"
          },
          "active" : {
            "default" : true,
            "description" : "True if the robot is not in rebooting mode",
            "type" : "boolean"
          },
          "virtual" : {
            "default" : false,
            "description" : "If the robot is in virtual mode",
            "type" : "boolean"
          },
          "priority" : {
            "description" : "The priority of this player. Higher is more priority. 1 = lowest. max = number of players",
            "maximum" : 8,
            "minimum" : 1,
            "type" : "integer"
          },
          "on-turn" : {
            "description" : "True if the robot is currently active (executing a register)",
            "type" : "boolean"
          },
          "is-mine" : {
            "description" : "True if you are the one controlling the robot",
            "type" : "boolean"
          },
          "hand-cards" : {
            "description" : "The cards in the hand of the robot",
            "maximum" : 9,
            "minimum" : 0,
            "type" : "integer"
          },
          "attitude" : {
            "default" : 0,
            "description" : "The height level of the robot",
            "maximum" : 4,
            "minimum" : 0,
            "type" : "integer"
          },
          "type" : {
            "$ref" : "#/components/schemas/Robots"
          }
        }
      },
      "Checkpoint_allOf" : {
        "properties" : {
          "number" : {
            "description" : "The number of the checkpoint defining the order they need to be called in",
            "minimum" : 0,
            "type" : "integer"
          },
          "checked-by" : {
            "description" : "The entities (robots) which allready were at this point",
            "items" : {
              "$ref" : "#/components/schemas/EntityID"
            },
            "type" : "array"
          }
        }
      }
    },
    "securitySchemes" : {
      "admin-access" : {
        "description" : "This is a static key needed for administrative operations like creating games and can only be obtained inside the servers runtime.\n\n``",
        "in" : "query",
        "name" : "skey",
        "type" : "apiKey"
      },
      "player-auth" : {
        "description" : "Players need a token to join a lobby/game. If the host sets a password the player needs the password to get the token",
        "in" : "query",
        "name" : "pat",
        "type" : "apiKey"
      }
    }
  }
}
