{
  "openapi": "3.0.0",
  "info": {
    "title": "Robot Rally Game logic engine",
    "version": "0.1.0",
    "description": "This api controlls the flow of a game and provides it's data.\nIt is desiged to be RESTfull so the structure works simmilar as file system.\nThe service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan",
    "contact": {
      "name": "Nils Brugger",
      "email": "nbrugger@student.tgm.ac.at"
    },
    "license": {
      "name": "Apache 2.0"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5050/v1",
      "description": "Mock"
    },
    {
      "url": "http://game.host/v1",
      "description": "Production"
    },
    {
      "url": "http://localhost:8080/v1",
      "description": "Debug"
    }
  ],
  "paths": {
    "/games/": {
      "get": {
        "summary": "Get all games",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "minItems": 0,
                  "items": {
                    "$ref": "#/components/schemas/GameID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getGames",
        "description": "Returns a list of all hosted games",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "joinable",
            "description": "true: only return joinable games"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "unprotected",
            "description": "true: only display games with no password set"
          }
        ]
      },
      "post": {
        "summary": "Create Game",
        "operationId": "createGame",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a random game by your defined rules",
        "security": [
          {
            "Host-token-access": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameRules"
              }
            }
          },
          "description": "*Optional*\nThis rules define how your game will behave"
        },
        "tags": [
          "Game"
        ]
      },
      "parameters": []
    },
    "/games/{game_id}/status": {
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GameID"
          }
        }
      ],
      "get": {
        "summary": "Get game status",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameInfo"
                }
              }
            }
          }
        },
        "operationId": "getGameState",
        "description": "Returns the status of a game",
        "parameters": [],
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/actions": {
      "get": {
        "summary": "Get games actions",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        },
        "operationId": "getActions",
        "security": [
          {
            "Host-token-access": []
          }
        ],
        "description": "Get all (**not robot related**) actions comitted to this game."
      },
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Commit Action",
        "operationId": "commitAction",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Queues an action to be executed",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ActionType"
            },
            "in": "query",
            "name": "action",
            "required": true
          }
        ],
        "security": [
          {
            "Host-token-access": []
          }
        ],
        "tags": [
          "Game"
        ]
      }
    },
    "/games/{game_id}/players/": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get all players",
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getAllPlayers",
        "description": "Returns the index of all players"
      },
      "post": {
        "summary": "Join game",
        "operationId": "join",
        "responses": {
          "200": {
            "description": "Joined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinResponse"
                }
              }
            }
          },
          "401": {
            "description": "Wrong/No password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Join the given game.\nYou will get your ID by doing this, if you already in the game you can get your ID again if you lost it.<br>\nThe id is neccessary for any further API calls",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "password",
            "description": "The password of the game if the lobby is password protected"
          }
        ],
        "tags": [
          "Players"
        ]
      }
    },
    "/games/{game_id}/players/{player_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "name": "player_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get player",
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          }
        },
        "operationId": "getPlayer",
        "description": "Get closer information about the player"
      },
      "delete": {
        "summary": "Remove Player",
        "operationId": "kickPlayer",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a player from the game. This can be done by the player itsself or by the host.",
        "security": [
          {
            "Player-Token-Access": []
          },
          {
            "Host-token-access": []
          }
        ],
        "tags": [
          "Players"
        ]
      },
      "patch": {
        "summary": "Set Robots",
        "operationId": "chooseRobot",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Stes the type of robot(s) the player is controlling",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Robots"
                }
              }
            }
          },
          "description": "The robots assigned to the player"
        }
      }
    },
    "/games/{game_id}/upgrades/shop": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get upgrade shop",
        "tags": [
          "Upgrades"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeShop"
                }
              }
            }
          }
        },
        "operationId": "getUpgradeShop",
        "description": "Retuns a list of all cards in the upgrade shop",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      },
      "patch": {
        "summary": "Buy Upgrade",
        "operationId": "buyUpgrade",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Buy this Upgrade from the shop.\n### Note\nIf your robot allready owns 3 Upgrades you have to use the `exchange` parameter. This is the ID of the Upgrade to replace with the bought one",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "upgrade",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "exchange"
          }
        ],
        "tags": [
          "Upgrades"
        ]
      }
    },
    "/games/{game_id}/upgrades/{upgrade_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/UpgradeID"
          },
          "name": "upgrade_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get upgrade information",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upgrade"
                }
              }
            }
          }
        },
        "operationId": "getUpgradeInformation",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "description": "Get detailed information about the Upgrade",
        "tags": [
          "Upgrades"
        ]
      }
    },
    "/games/{game_id}/upgrades/": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "get all Upgrades",
        "tags": [
          "Upgrades"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpgradeID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getAllUpgradeIDs",
        "description": "Returns a list of all Upgrade IDs",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/entitys/robots/{robot_id}/registers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/EntityID"
          },
          "name": "robot_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get register information",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              }
            }
          }
        },
        "operationId": "getRegisters",
        "description": "Returns the content of the registers",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      },
      "patch": {
        "summary": "change register content",
        "operationId": "updateRegister",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Robots"
        ],
        "description": "Updates the card in a register",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      },
      "delete": {
        "summary": "clear registers",
        "operationId": "clearRegisters",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Robots"
        ],
        "description": "Emptys all register of the robot",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/entitys/robots/{robot_id}/upgrades": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/EntityID"
          },
          "name": "robot_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Robot Upgrades",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpgradeID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getInstalledUpgrades",
        "description": "Returns the upgrades installed on the robot",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      },
      "delete": {
        "summary": "Clear Robot Upgrades",
        "operationId": "clearUpgrades",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes all upgrades from a robot",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "tags": [
          "Robots"
        ]
      },
      "patch": {
        "summary": "Remove Upgrade",
        "operationId": "removeRobotUpgrade",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a paticular upgrade from the robot",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "upgrade"
          }
        ],
        "tags": [
          "Robots"
        ]
      }
    },
    "/games/{game_id}/events/type": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "trace event",
        "operationId": "traceEvent",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event-type": {
                      "$ref": "#/components/schemas/EventType"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "All events needed by the client are accessible here. (Usefull for animations)\nMore about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)\n\n**This function only returns the type of the event you need to fetch the data seperately**\n> Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events--updates)",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "batch",
            "description": "If true you will get all past events at once"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "wait",
            "description": "If true the server will not responde until a event is added to the queue\n\nRrequires less traffic but might impacts the servers performance or cause timeouts at the client"
          }
        ],
        "tags": [
          "EventHandling"
        ]
      }
    },
    "/games/{game_id}/map/tiles/{x}/{y}": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "x",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "y",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get tile",
        "tags": [
          "Map"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          }
        },
        "operationId": "getTile",
        "description": "Inspect a tile of the map",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/map/info": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Map info",
        "tags": [
          "Map"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapInfo"
                }
              }
            }
          }
        },
        "operationId": "getMapInfo",
        "description": "Get meta information abouzt the map of the game",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/movement": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last movement event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextMovementEvent",
        "description": "Returns the next unfetched event of the movement type.\n\nIf the event is not of the movement type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/damage": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last damage event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DamageEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextDamageEvent",
        "description": "Returns the next unfetched event of the damage type.\n\nIf the event is not of the damage type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/lazer-hit": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last Lazer hit event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LazerHitEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextLazerHitEvent",
        "description": "Returns the next unfetched event of the lazer hit type.\n\nIf the event is not of the lazer hit type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/map": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last map event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextMapEvent",
        "description": "Returns the next unfetched event of the  Map Event type.\nMap Events activeata all active components of a type at once\n\nIf the event is not of the map event type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/push": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last push event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextPushEvent",
        "description": "Returns the next unfetched event of the push type.\n\nIf the event is not of the push  type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/shoot": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last shoot event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShootEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextShootEvent",
        "description": "Returns the next unfetched event of the movement type.\n\nIf the event is not of the movement type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/events/shutdown": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get next / last shutdown event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShutdownEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          },
          "417": {
            "description": "The next event is not a movement event"
          }
        },
        "operationId": "fetchNextShutdownEvent",
        "description": "Returns the next unfetched event of the movement type.\n\nIf the event is not of the movement type you will get a `400` status and the event stays unfetched",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/entitys/robots/{robot_id}/info": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "robot_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Robot Informations",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotInfo"
                }
              }
            }
          }
        },
        "operationId": "getRobotStats",
        "description": "Returns the status and info about the robot",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/entitys/robots/{robot_id}/actions/stack/": {
      "parameters": [
        {
           "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "robot_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Add Entity Action to stack",
        "operationId": "doEntityAction",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Adds an action to the stack. The stack is processed using *first in first out*",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityAction"
              }
            }
          }
        },
        "tags": [
          "Robots"
        ]
      },
      "get": {
        "summary": "Get Robot action stack",
        "operationId": "getActionStack",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityAction"
                  }
                }
              }
            }
          }
        },
        "description": "Retuns a list od all actions in the stack",
        "security": [
          {
            "Player-Token-Access": []
          }
        ],
        "tags": [
          "Robots"
        ]
      }
    },
    "/games/{game_id}/entitys/robots/{robot_id}/actions/avinable": {
      "parameters": [
        {
         "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "robot_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Aviable actions",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityEventOportunity"
                  }
                }
              }
            }
          }
        },
        "operationId": "getPossibleActions",
        "description": "Returns a list of EntityActionTypes which are possible to be executed at the moment.",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    },
    "/games/{game_id}/entitys/robots/": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": "game_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get all robots",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getRobots",
        "description": "Returns a list of all robot IDs in this game.\n> A robot is not a player as a player is able to controll multiple robots",
        "security": [
          {
            "Player-Token-Access": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Host-token-access": {
        "type": "apiKey",
        "in": "query",
        "description": "The Host of the game (and of the API) has an unique identificaton granting him game manipulating abilities. By this means it is also possible to have a host and a client at the same machine. \n> This could be used for AI`s (bot players)",
        "name": "hid"
      },
      "Player-Token-Access": {
        "type": "apiKey",
        "in": "query",
        "description": "Players need a token to join a lobby/game. If the host sets a password the player needs the password to get the token",
        "name": "uid"
      }
    },
    "schemas": {
      "Tile": {
        "type": "object",
        "title": "Tile",
        "description": "A tile is a square at the Game field<br>\n**Note:** \n* `direction` is only aviable for belts\n* properties with a `rotator-` prefix are only aviable for rotator (parts)",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TileType"
          },
          "empty": {
            "type": "boolean",
            "description": "If there is no player at the tile this is true"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "rotator-direction": {
            "$ref": "#/components/schemas/Rotation"
          }
        },
        "required": [
          "type"
        ]
      },
      "TileType": {
        "type": "string",
        "title": "TileType",
        "description": "The type defines the function of a tile and how it is displayed. The behaviour is unknown to the client",
        "enum": [
          "normal",
          "rotator",
          "wall",
          "prio_core",
          "conveyor",
          "trap-door",
          "stomper",
          "radioactive",
          "repair site",
          "Button",
          "Wall",
          "One Way Wall",
          "Puddle",
          "pit",
          "Ramp"
        ]
      },
      "Direction": {
        "type": "string",
        "title": "Direction",
        "default": "up",
        "description": "Defines a direction in a 2D system. the X and Y values can be defined by the client.",
        "enum": [
          "up",
          "down",
          "left",
          "right"
        ]
      },
      "RotatorPosition": {
        "type": "string",
        "title": "RotatorPosition",
        "description": "The rotator blocks consist of 4 blocks. This 4 blocks can be differenciated by this property",
        "enum": [
          "up_left",
          "up_right",
          "down_left",
          "down_right"
        ]
      },
      "Rotation": {
        "type": "string",
        "title": "Rotation",
        "default": "left",
        "description": "Defines wether to turn left or right",
        "enum": [
          "left",
          "right"
        ]
      },
      "Entity": {
        "type": "object",
        "title": "Entity",
        "description": "Describes a actor at the game board. Not to be confused with `Player` which is the person controlling the Entity.\n<br>\nthis will *most likely* be a player controlled robot but it also can be a AI controlled Entity or robot\n> We did use Entity instead of the word Robot or bot because the word *bot* is used for the AIs controlling the robot. And also because theoretial a entity can be a not robot entity",
        "additionalProperties": false,
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only"
          },
          "location": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "required": [
          "direction",
          "name",
          "location"
        ]
      },
      "GameRules": {
        "title": "GameRules",
        "type": "object",
        "description": "Game Rules define the rules for a Game",
        "properties": {
          "player-names-visible": {
            "type": "boolean",
            "default": true,
            "description": "If true players can see the name of the player controlling a robot"
          },
          "wholes": {
            "type": "boolean",
            "default": true,
            "description": "If true wholes will spaw on the map"
          },
          "max-players": {
            "type": "integer",
            "default": 4,
            "minimum": 1,
            "maximum": 10,
            "description": "The maximum ammount of players able to join the game"
          }
        }
      },
      "Game": {
        "title": "Game",
        "type": "object",
        "description": "A Game is like a lobby, people can join/leave.<br>\nA Game is created by a host who does *not* needs to attend the game as a player but in the most cases he will.\nThis is *read-only*",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": {
            "type": "string",
            "example": "Nitons Game 1",
            "minLength": 3,
            "maxLength": 20,
            "pattern": "[A-Za-z]+[A-Za-z0-9 _-]+",
            "description": "The name is **unique** but it should ***not*** be used as identifer (it's not natively supportet)\nIt is used to display the game's name"
          },
          "players": {
            "type": "array",
            "minItems": 0,
            "description": "The list of players attending the game.\n(Only contains the name of the players)",
            "items": {
              "$ref": "#/components/schemas/Name"
            }
          },
          "runtime_info": {
            "$ref": "#/components/schemas/GameState"
          }
        },
        "required": [
          "name"
        ]
      },
      "GameID": {
        "type": "integer",
        "title": "GameID",
        "description": "**Unique**<br>\nThis is the parameter a game is identified by",
        "format": "int32",
        "example": 537,
        "minimum": 0,
        "maximum": 2048
      },
      "Name": {
        "type": "string",
        "title": "Name",
        "description": "The default rule for names in the game",
        "example": "Niton 1",
        "minLength": 3,
        "maxLength": 13,
        "pattern": "[A-Za-z]+[A-Za-z0-9 _-]+"
      },
      "GameInfo": {
        "title": "Game Info",
        "type": "object",
        "description": "Describes the current state of the game. It does not includes the gamedata (like players/poitions/field) but general information.\n\nThis is read only",
        "properties": {
          "passed-time": {
            "type": "integer",
            "default": -1,
            "description": "The time passed since the game started in secconds. If the game is not started it will be `0`",
            "format": "int32",
            "example": 240,
            "minimum": -1
          },
          "state": {
            "$ref": "#/components/schemas/GameState"
          },
          "hardware-compatible": {
            "type": "boolean",
            "default": false,
            "description": "Not every game can be connected to hardware (for example to many bots)\n\nIf this is true it means you can use this game with hardware"
          },
          "hardware-attached": {
            "type": "boolean",
            "default": false,
            "description": "Is a hardware boead connected"
          },
          "player-on-turn": {
            "$ref": "#/components/schemas/PlayerID"
          }
        },
        "required": [
          "passed-time",
          "state",
          "hardware-compatible",
          "hardware-attached",
          "player-on-turn"
        ]
      },
      "GameState": {
        "type": "string",
        "title": "GameStatus",
        "description": "The phase the game is currently in\n* `Lobby`: Players are able to join, Bots able to be added. Host can decide to start the game and leave the phase\n* `Planning`: **[BETA - Not in game]** Players can choose their type of robot/bots bots autopick\n* `Playing`: The game is running and the players can do interactions\n* `Break`: The game is paused by the host. Players can still do interactions but they wont be executed as long as the break lasts\n* `Finished` : The game is over and there is a winner. This is the time to save the game for a replay\n",
        "enum": [
          "LOBBY",
          "PLANNING",
          "PLAYING",
          "FINISHED",
          "BREAK"
        ]
      },
      "Password": {
        "type": "string",
        "title": "Password",
        "description": "The password of a game",
        "format": "password",
        "example": "QWer7zÜ",
        "minLength": 4,
        "maxLength": 18
      },
      "Error-Message": {
        "title": "Error-Message",
        "type": "object",
        "description": "A message about that went wrong. Usefull to display users a short and usefull prompt",
        "properties": {
          "message": {
            "type": "string",
            "description": "A short message describing what happened in human words"
          },
          "error": {
            "type": "string",
            "description": "The error/exception"
          }
        },
        "required": [
          "message"
        ]
      },
      "Action": {
        "title": "Action",
        "type": "object",
        "description": "A queued action.\nActions are executed in their adding sequence which is represented by their index",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The queue index of the action"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "canceled": {
            "type": "boolean",
            "description": "true if the player canceled the action"
          },
          "executed": {
            "type": "boolean",
            "description": "true if the action was allready executed"
          },
          "requestor": {
            "type": "integer",
            "description": "The index of the player this instruction came from"
          }
        }
      },
      "RoundPhase": {
        "type": "string",
        "title": "RoundPhase",
        "description": "A round consits of 3 Phases each phase does different things\n* `Upgrade` : Purchase Upgrades with energy cubes\n* `Programming` : Programm your robot(s)\n* `Activation` : The robots execute their code",
        "enum": [
          "upgrade",
          "programming",
          "activation"
        ]
      },
      "UpgradeShop": {
        "type": "object",
        "description": "A shop to buy upgrades from. Each element is buyable once and then vanishes from the list",
        "properties": {
          "upgrades": {
            "type": "array",
            "minItems": 3,
            "maxItems": 10,
            "title": "UpgradeShop",
            "items": {
              "$ref": "#/components/schemas/UpgradeID"
            }
          },
          "information": {
            "$ref": "#/components/schemas/UpgradeShopInformation"
          }
        }
      },
      "Upgrade": {
        "type": "object",
        "title": "Upgrade",
        "description": "A upgrade is a module making a robot stronger",
        "additionalProperties": false,
        "minProperties": 4,
        "properties": {
          "cost": {
            "type": "integer",
            "default": 2,
            "description": "The energy cost to buy this upgrade",
            "minimum": 0,
            "maximum": 5
          },
          "name": {
            "type": "string",
            "description": "The ame to display for this Upgrade. ***Not*** unique (identifying)",
            "example": "Penetration Lazer Mk.2",
            "minLength": 2,
            "maxLength": 27
          },
          "permanent": {
            "type": "boolean",
            "default": true,
            "description": "if true the card belongs to the player for the rest of the game"
          },
          "description": {
            "type": "string",
            "default": null,
            "description": "A description about the effect of the card.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength": 300
          },
          "rounds": {
            "type": "integer",
            "description": "If the Upgrade is not permanent this variable defines the number of rounds this Upgrade works",
            "minimum": 1,
            "maximum": 10
          },
          "values": {
            "type": "array",
            "description": "Defines number values for the upgrade.<br>Example:\nEffect: \"You have {registers} additonal Registers\"<br> `{registers}` is the number of the regsiters (that will be added) and the exact value will be defined in here (`values`)",
            "uniqueItems": true,
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "type": {
            "$ref": "#/components/schemas/UpgradeType"
          },
          "id": {
            "$ref": "#/components/schemas/UpgradeID"
          }
        },
        "required": [
          "cost",
          "name",
          "type"
        ]
      },
      "RobotCommand": {
        "title": "RobotCommand",
        "type": "object",
        "description": "A command for a robot to execute",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Instruction"
          },
          "parameters": {
            "type": "array",
            "description": "Defines parameters for the instruction.<br>Example:\nEffect: \"Move {steps} steps forward\"<br> `{steps}` is the number of steps the robot will do. And the exact value (of steps) will be defined in here (`values`)",
            "uniqueItems": true,
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "description": {
            "type": "string",
            "default": null,
            "description": "A description about the effect of the command.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength": 300
          },
          "name": {
            "type": "string",
            "description": "The ame to display for this Command. ***Not*** unique (identifying)",
            "example": "Penetration Lazer Mk.2",
            "minLength": 2,
            "maxLength": 27
          },
          "times": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10,
            "description": "Describes how often this command is going to be executed"
          }
        },
        "required": [
          "type"
        ]
      },
      "Pair": {
        "type": "object",
        "title": "Pair",
        "additionalProperties": false,
        "minProperties": 1,
        "maxProperties": 2,
        "description": "A named value. A pair of an index and value. (Part of a map)",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name the value is bound to"
          },
          "value": {
            "description": "The value behind the name. Can be null",
            "type": "integer"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpgradeType": {
        "type": "string",
        "title": "UpgradeType",
        "description": "Defines the type (the code/actions) this card will have\n* `generator` : Generates *x* energy every round",
        "enum": [
          "generator"
        ],
        "maxLength": 300
      },
      "Instruction": {
        "type": "string",
        "title": "Instruction",
        "description": "Defines what a command will do",
        "enum": [
          "move",
          "rotate"
        ]
      },
      "Player": {
        "title": "Player",
        "type": "object",
        "description": "A player attending in a game.\n#### Warning\nThis is **not** permanent. It is created and removed with the game (or with you joining and leaving the game)",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "controlled_entities": {
            "type": "array",
            "description": "The list of entities controlled by this player",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/EntityID"
            }
          },
          "on-turn": {
            "type": "boolean",
            "default": false,
            "description": "Îf this is true rhe player is able to interact at the moment"
          }
        },
        "required": [
          "id",
          "controlled_entities"
        ]
      },
      "PlayerID": {
        "type": "integer",
        "title": "PlayerID",
        "description": "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
        "example": 3,
        "minimum": 0,
        "maximum": 8
      },
      "EntityID": {
        "type": "integer",
        "title": "EntityID",
        "description": "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
        "format": "int32",
        "minimum": 0
      },
      "Replay": {
        "title": "Replay",
        "type": "object",
        "description": "## BETA (Adressed in V0.1.2)\nA replay consists of all data needed to replay a game. Means starting conditions and every change that was made"
      },
      "ActionType": {
        "type": "string",
        "title": "ActionType",
        "description": "Defines what an action will do",
        "enum": [
          "PAUSE",
          "UNPAUSE"
        ]
      },
      "JoinResponse": {
        "title": "JoinResponse",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "uid": {
            "type": "integer",
            "description": "The uid is the key for the joined player. You need this key for authentication"
          }
        },
        "required": [
          "uid",
          "id"
        ],
        "description": "All the data you need as you joined a game."
      },
      "UpgradeID": {
        "type": "integer",
        "title": "UpgradeID",
        "minimum": 0,
        "maximum": 10000,
        "description": "The id of an upgrade. **Unique**"
      },
      "UpgradeShopInformation": {
        "title": "UpgradeShopInformation",
        "type": "object",
        "properties": {
          "open": {
            "type": "boolean",
            "default": true,
            "description": "if true you can buy uprades"
          }
        }
      },
      "EventType": {
        "type": "string",
        "title": "EventType",
        "description": "Describes what the event is about",
        "enum": [
          "movement",
          "upgrade purchase",
          "fill register",
          "activate upgrade",
          "lazer shot",
          "game start",
          "clear shop",
          "fill shop",
          "register clear",
          "programming timer start",
          "programming timer stop",
          "random card distribution",
          "take card event",
          "activate checkpoint"
        ]
      },
      "MovementEvent": {
        "title": "MovementEvent",
        "type": "object",
        "description": "Describes the movement of a entity",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "movement-ammount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 50,
            "description": "How far (in tiles) the movement was executed"
          },
          "rotation": {
            "$ref": "#/components/schemas/Rotation"
          },
          "rotation-times": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "The number of times (90°) the robot turns"
          },
          "from": {
            "$ref": "#/components/schemas/Position"
          },
          "to": {
            "$ref": "#/components/schemas/Position"
          }
        }
      },
      "Position": {
        "title": "Position",
        "type": "object",
        "description": "Describes a point in a 2D system, without decimals",
        "properties": {
          "x": {
            "type": "integer",
            "description": "The X cordinate",
            "multipleOf": 1
          },
          "y": {
            "type": "integer",
            "description": "Position on the Y axis (top-down on screen)",
            "multipleOf": 1
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "MapInfo": {
        "title": "MapInfo",
        "type": "object",
        "description": "Describes the map *without* the tiles",
        "properties": {
          "width": {
            "type": "integer",
            "minimum": 4,
            "maximum": 500
          },
          "height": {
            "type": "integer",
            "minimum": 4,
            "maximum": 500
          },
          "prioBeacon": {
            "$ref": "#/components/schemas/Position"
          }
        }
      },
      "PushEvent": {
        "title": "PushEvent",
        "type": "object",
        "description": "When entities push each other",
        "properties": {
          "pusher-id": {
            "$ref": "#/components/schemas/EntityID"
          },
          "ammount": {
            "type": "integer",
            "minimum": 1,
            "description": "The number of tiles the pushed entity is pushed"
          },
          "push-directon": {
            "$ref": "#/components/schemas/Direction"
          },
          "pushed-id": {
            "$ref": "#/components/schemas/EntityID"
          }
        }
      },
      "ShootEvent": {
        "title": "ShootEvent",
        "type": "object",
        "description": "Event if a player shoots a lazer",
        "properties": {
          "shooter": {
            "$ref": "#/components/schemas/EntityID"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "to": {
            "$ref": "#/components/schemas/Position"
          },
          "hit-entitys": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "description": "The entitys hit by the ray",
            "items": {
              "$ref": "#/components/schemas/EntityID"
            }
          }
        }
      },
      "DamageEvent": {
        "title": "DamageEvent",
        "type": "object",
        "description": "Happens when a entity takes damage",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          },
          "ammount": {
            "type": "integer",
            "description": "The number of damage points",
            "minimum": 0,
            "maximum": 5
          }
        }
      },
      "MapEventType": {
        "type": "string",
        "title": "MapEventType",
        "description": "The event that occurs if the active map elements are activated",
        "enum": [
          "lazer",
          "rotator",
          "conveyor-belts",
          "stomper",
          "hole",
          "hole-trap",
          "pusher",
          "flamethrower",
          "portal",
          "toggle-ramps",
          "repair"
        ]
      },
      "MapEvent": {
        "title": "MapEvent",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MapEventType"
          }
        },
        "description": "Events that takes place with the active components of the map"
      },
      "LazerHitEvent": {
        "title": "LazerHitEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "Called when a player is hit by an "
      },
      "ShutdownEvent": {
        "title": "ShutdownEvent",
        "description": "When a robot reboots",
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          }
        }
      },
      "EntityAction": {
        "title": "EntityAction",
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/EntityActionPhase"
          },
          "type": {
            "$ref": "#/components/schemas/EntityActionType"
          }
        },
        "description": "The base type for entity actions between registers"
      },
      "EntityActionType": {
        "type": "string",
        "title": "EntityActionType",
        "default": "none",
        "description": "Defines the action itsselft (what the action is doing)",
        "enum": [
          "reboot",
          "use upgrade",
          "spider_jump",
          "Cache",
          "register-refresh",
          "storage-swap",
          "jumper",
          "teleporter",
          "magnet-ray",
          "pushray",
          "rotation",
          "sidekick"
        ]
      },
      "EntityActionPhase": {
        "type": "string",
        "title": "EntityActionPhase",
        "enum": [
          "pre_register",
          "after_register"
        ],
        "description": "The moment at which a entity action can be performed"
      },
      "EntityEventOportunity": {
        "title": "EntityEventOportunity",
        "type": "object",
        "description": "The oportunity to perfom an action / event",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EntityActionType"
          },
          "time-left": {
            "type": "integer",
            "description": "The time in ms left to do this action",
            "format": "int64",
            "minimum": 1
          },
          "end-time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "The in most languages avinable system time in MS as of which the action cant be committed any more"
          }
        }
      },
      "SimpleUpgradeActivation": {
        "title": "SimpleUpgradeActivation",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAction"
          },
          {
            "type": "object",
            "properties": {
              "upgrade": {
                "$ref": "#/components/schemas/UpgradeID"
              }
            }
          }
        ],
        "description": "type is allways `use-upgrade`"
      },
      "EntityUseUpgradeAction": {
        "title": "EntityUseUpgradeAction",
        "description": "The action to make an entity use an upgade card (including the actions which require additional information)",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAction"
          },
          {
            "type": "object",
            "properties": {
              "upgrade": {
                "$ref": "#/components/schemas/UpgradeID"
              }
            }
          }
        ]
      },
      "Robots": {
        "type": "string",
        "title": "Robots",
        "enum": [
          "dicer"
        ]
      },
      "RobotInfo": {
        "title": "RobotInfo",
        "description": "Describes the state/stats of a robot",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "energy-cubes": {
                "type": "integer",
                "default": 3,
                "description": "The number of avainable energy cubes",
                "minimum": 0,
                "maximum": 20
              },
              "health": {
                "type": "integer",
                "default": 10,
                "description": "The remaining health points",
                "minimum": 1,
                "maximum": 10
              },
              "active": {
                "type": "boolean",
                "default": true,
                "description": "True if the robot is not in rebooting mode"
              },
              "virtual": {
                "type": "boolean",
                "default": false,
                "description": "If the robot is in virtual mode"
              },
              "priority": {
                "type": "integer",
                "minimum": 1,
                "maximum": 8,
                "description": "The priority of this player. Higher is more priority. 1 = lowest. max = number of players"
              },
              "on-turn": {
                "type": "boolean",
                "description": "True if the robot is currently active (executing a register)"
              },
              "is-mine": {
                "type": "boolean",
                "description": "True if you are the one controlling the robot"
              },
              "hand-cards": {
                "type": "integer",
                "minimum": 0,
                "maximum": 9,
                "description": "The cards in the hand of the robot"
              },
              "attitude": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 4,
                "description": "The height level of the robot"
              }
            }
          }
        ]
      },
      "Checkpoint": {
        "title": "Checkpoint",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "minimum": 0,
                "description": "The number of the checkpoint defining the order they need to be called in"
              },
              "checked-by": {
                "type": "array",
                "description": "The entities (robots) which allready were at this point",
                "items": {
                  "$ref": "#/components/schemas/EntityID"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "description": "Checkpoints are entities"
      }
    }
  },
  "tags": [
    {
      "description": "All actions needed to interact with players.<br>Keep in mid that a player is *not* a robot",
      "name": "Players"
    },
    {
      "description": "All actions needed to interact with the game itself and mostly to get information",
      "name": "Game"
    },
    {
      "description": "All actions directly done with the robots and other robot related actions",
      "name": "Robots"
    },
    {
      "description": "Buying and reading upgrades",
      "name": "Upgrades"
    },
    {
      "description": "Iterct with the the map",
      "name": "Map"
    },
    {
      "description": "Recive and react to events",
      "name": "EventHandling"
    }
  ]
}