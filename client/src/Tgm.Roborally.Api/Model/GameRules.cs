/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tgm.Roborally.Api.Client.OpenAPIDateConverter;

namespace Tgm.Roborally.Api.Model
{
    /// <summary>
    /// Game Rules define the rules for a Game
    /// </summary>
    [DataContract]
    public partial class GameRules :  IEquatable<GameRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameRules" /> class.
        /// </summary>
        /// <param name="playerNamesVisible">If true players can see the name of the player controlling a robot (default to true).</param>
        /// <param name="wholes">If true wholes will spaw on the map (default to true).</param>
        /// <param name="maxPlayers">The maximum ammount of players able to join the game (default to 4).</param>
        public GameRules(bool playerNamesVisible = true, bool wholes = true, int maxPlayers = 4)
        {
            this.PlayerNamesVisible = playerNamesVisible;
            this.Wholes = wholes;
            this.MaxPlayers = maxPlayers;
        }
        
        /// <summary>
        /// If true players can see the name of the player controlling a robot
        /// </summary>
        /// <value>If true players can see the name of the player controlling a robot</value>
        [DataMember(Name="player-names-visible", EmitDefaultValue=false)]
        public bool PlayerNamesVisible { get; set; }

        /// <summary>
        /// If true wholes will spaw on the map
        /// </summary>
        /// <value>If true wholes will spaw on the map</value>
        [DataMember(Name="wholes", EmitDefaultValue=false)]
        public bool Wholes { get; set; }

        /// <summary>
        /// The maximum ammount of players able to join the game
        /// </summary>
        /// <value>The maximum ammount of players able to join the game</value>
        [DataMember(Name="max-players", EmitDefaultValue=false)]
        public int MaxPlayers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameRules {\n");
            sb.Append("  PlayerNamesVisible: ").Append(PlayerNamesVisible).Append("\n");
            sb.Append("  Wholes: ").Append(Wholes).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GameRules);
        }

        /// <summary>
        /// Returns true if GameRules instances are equal
        /// </summary>
        /// <param name="input">Instance of GameRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlayerNamesVisible == input.PlayerNamesVisible ||
                    this.PlayerNamesVisible.Equals(input.PlayerNamesVisible)
                ) && 
                (
                    this.Wholes == input.Wholes ||
                    this.Wholes.Equals(input.Wholes)
                ) && 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    this.MaxPlayers.Equals(input.MaxPlayers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PlayerNamesVisible.GetHashCode();
                hashCode = hashCode * 59 + this.Wholes.GetHashCode();
                hashCode = hashCode * 59 + this.MaxPlayers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxPlayers (int) maximum
            if(this.MaxPlayers > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxPlayers, must be a value less than or equal to 10.", new [] { "MaxPlayers" });
            }

            // MaxPlayers (int) minimum
            if(this.MaxPlayers < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxPlayers, must be a value greater than or equal to 1.", new [] { "MaxPlayers" });
            }

            yield break;
        }
    }

}
