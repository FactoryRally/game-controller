/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMapApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Map
        /// </summary>
        /// <remarks>
        /// Returns the map of this specific game including the tiles (data)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Map</returns>
        Map GetGameMap (string gameId);

        /// <summary>
        /// Get Map
        /// </summary>
        /// <remarks>
        /// Returns the map of this specific game including the tiles (data)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Map</returns>
        ApiResponse<Map> GetGameMapWithHttpInfo (string gameId);
        /// <summary>
        /// Get Map info
        /// </summary>
        /// <remarks>
        /// Get meta information abouzt the map of the game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MapInfo</returns>
        MapInfo GetMapInfo (int gameId);

        /// <summary>
        /// Get Map info
        /// </summary>
        /// <remarks>
        /// Get meta information abouzt the map of the game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MapInfo</returns>
        ApiResponse<MapInfo> GetMapInfoWithHttpInfo (int gameId);
        /// <summary>
        /// Get tile
        /// </summary>
        /// <remarks>
        /// Inspect a tile of the map
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Tile</returns>
        Tile GetTile (int gameId, string x, string y);

        /// <summary>
        /// Get tile
        /// </summary>
        /// <remarks>
        /// Inspect a tile of the map
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Tile</returns>
        ApiResponse<Tile> GetTileWithHttpInfo (int gameId, string x, string y);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Map
        /// </summary>
        /// <remarks>
        /// Returns the map of this specific game including the tiles (data)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of Map</returns>
        System.Threading.Tasks.Task<Map> GetGameMapAsync (string gameId);

        /// <summary>
        /// Get Map
        /// </summary>
        /// <remarks>
        /// Returns the map of this specific game including the tiles (data)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (Map)</returns>
        System.Threading.Tasks.Task<ApiResponse<Map>> GetGameMapAsyncWithHttpInfo (string gameId);
        /// <summary>
        /// Get Map info
        /// </summary>
        /// <remarks>
        /// Get meta information abouzt the map of the game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MapInfo</returns>
        System.Threading.Tasks.Task<MapInfo> GetMapInfoAsync (int gameId);

        /// <summary>
        /// Get Map info
        /// </summary>
        /// <remarks>
        /// Get meta information abouzt the map of the game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MapInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapInfo>> GetMapInfoAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get tile
        /// </summary>
        /// <remarks>
        /// Inspect a tile of the map
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of Tile</returns>
        System.Threading.Tasks.Task<Tile> GetTileAsync (int gameId, string x, string y);

        /// <summary>
        /// Get tile
        /// </summary>
        /// <remarks>
        /// Inspect a tile of the map
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse (Tile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tile>> GetTileAsyncWithHttpInfo (int gameId, string x, string y);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MapApi : IMapApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MapApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MapApi(String basePath)
        {
            this.Configuration = new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MapApi"/> class
        /// </summary>
        /// <returns></returns>
        public MapApi()
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MapApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MapApi(Tgm.Roborally.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Map Returns the map of this specific game including the tiles (data)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Map</returns>
        public Map GetGameMap (string gameId)
        {
             ApiResponse<Map> localVarResponse = GetGameMapWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Map Returns the map of this specific game including the tiles (data)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Map</returns>
        public ApiResponse<Map> GetGameMapWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetGameMap");

            var localVarPath = "/games/{game_id}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Map>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Map) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
        }

        /// <summary>
        /// Get Map Returns the map of this specific game including the tiles (data)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of Map</returns>
        public async System.Threading.Tasks.Task<Map> GetGameMapAsync (string gameId)
        {
             ApiResponse<Map> localVarResponse = await GetGameMapAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Map Returns the map of this specific game including the tiles (data)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (Map)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Map>> GetGameMapAsyncWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetGameMap");

            var localVarPath = "/games/{game_id}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Map>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Map) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
        }

        /// <summary>
        /// Get Map info Get meta information abouzt the map of the game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MapInfo</returns>
        public MapInfo GetMapInfo (int gameId)
        {
             ApiResponse<MapInfo> localVarResponse = GetMapInfoWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Map info Get meta information abouzt the map of the game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MapInfo</returns>
        public ApiResponse<MapInfo> GetMapInfoWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetMapInfo");

            var localVarPath = "/games/{game_id}/map/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapInfo)));
        }

        /// <summary>
        /// Get Map info Get meta information abouzt the map of the game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MapInfo</returns>
        public async System.Threading.Tasks.Task<MapInfo> GetMapInfoAsync (int gameId)
        {
             ApiResponse<MapInfo> localVarResponse = await GetMapInfoAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Map info Get meta information abouzt the map of the game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MapInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapInfo>> GetMapInfoAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetMapInfo");

            var localVarPath = "/games/{game_id}/map/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapInfo)));
        }

        /// <summary>
        /// Get tile Inspect a tile of the map
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Tile</returns>
        public Tile GetTile (int gameId, string x, string y)
        {
             ApiResponse<Tile> localVarResponse = GetTileWithHttpInfo(gameId, x, y);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tile Inspect a tile of the map
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Tile</returns>
        public ApiResponse<Tile> GetTileWithHttpInfo (int gameId, string x, string y)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetTile");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MapApi->GetTile");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MapApi->GetTile");

            var localVarPath = "/games/{game_id}/map/tiles/{x}/{y}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tile)));
        }

        /// <summary>
        /// Get tile Inspect a tile of the map
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of Tile</returns>
        public async System.Threading.Tasks.Task<Tile> GetTileAsync (int gameId, string x, string y)
        {
             ApiResponse<Tile> localVarResponse = await GetTileAsyncWithHttpInfo(gameId, x, y);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tile Inspect a tile of the map
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse (Tile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tile>> GetTileAsyncWithHttpInfo (int gameId, string x, string y)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MapApi->GetTile");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MapApi->GetTile");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MapApi->GetTile");

            var localVarPath = "/games/{game_id}/map/tiles/{x}/{y}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tile)));
        }

    }
}
