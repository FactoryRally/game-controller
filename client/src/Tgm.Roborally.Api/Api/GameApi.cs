/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Commit Action
        /// </summary>
        /// <remarks>
        /// Queues an action to be executed
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        void CommitAction (string gameId, ActionType action);

        /// <summary>
        /// Commit Action
        /// </summary>
        /// <remarks>
        /// Queues an action to be executed
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommitActionWithHttpInfo (string gameId, ActionType action);
        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Creates a random game by your defined rules
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns></returns>
        void CreateGame (GameRules gameRules = default(GameRules));

        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Creates a random game by your defined rules
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateGameWithHttpInfo (GameRules gameRules = default(GameRules));
        /// <summary>
        /// Get games actions
        /// </summary>
        /// <remarks>
        /// Get all (**not robot related**) actions comitted to this game.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;Action&gt;</returns>
        List<Tgm.Roborally.Api.Model.Action> GetActions (string gameId);

        /// <summary>
        /// Get games actions
        /// </summary>
        /// <remarks>
        /// Get all (**not robot related**) actions comitted to this game.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;Action&gt;</returns>
        ApiResponse<List<Tgm.Roborally.Api.Model.Action>> GetActionsWithHttpInfo (string gameId);
        /// <summary>
        /// Get game status
        /// </summary>
        /// <remarks>
        /// Returns the status of a game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>GameInfo</returns>
        GameInfo GetGameState (int gameId);

        /// <summary>
        /// Get game status
        /// </summary>
        /// <remarks>
        /// Returns the status of a game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of GameInfo</returns>
        ApiResponse<GameInfo> GetGameStateWithHttpInfo (int gameId);
        /// <summary>
        /// Get all games
        /// </summary>
        /// <remarks>
        /// Returns a list of all hosted games
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetGames (bool? joinable = default(bool?), bool? unprotected = default(bool?));

        /// <summary>
        /// Get all games
        /// </summary>
        /// <remarks>
        /// Returns a list of all hosted games
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetGamesWithHttpInfo (bool? joinable = default(bool?), bool? unprotected = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Commit Action
        /// </summary>
        /// <remarks>
        /// Queues an action to be executed
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommitActionAsync (string gameId, ActionType action);

        /// <summary>
        /// Commit Action
        /// </summary>
        /// <remarks>
        /// Queues an action to be executed
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommitActionAsyncWithHttpInfo (string gameId, ActionType action);
        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Creates a random game by your defined rules
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateGameAsync (GameRules gameRules = default(GameRules));

        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Creates a random game by your defined rules
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateGameAsyncWithHttpInfo (GameRules gameRules = default(GameRules));
        /// <summary>
        /// Get games actions
        /// </summary>
        /// <remarks>
        /// Get all (**not robot related**) actions comitted to this game.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;Action&gt;</returns>
        System.Threading.Tasks.Task<List<Tgm.Roborally.Api.Model.Action>> GetActionsAsync (string gameId);

        /// <summary>
        /// Get games actions
        /// </summary>
        /// <remarks>
        /// Get all (**not robot related**) actions comitted to this game.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;Action&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tgm.Roborally.Api.Model.Action>>> GetActionsAsyncWithHttpInfo (string gameId);
        /// <summary>
        /// Get game status
        /// </summary>
        /// <remarks>
        /// Returns the status of a game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of GameInfo</returns>
        System.Threading.Tasks.Task<GameInfo> GetGameStateAsync (int gameId);

        /// <summary>
        /// Get game status
        /// </summary>
        /// <remarks>
        /// Returns the status of a game
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (GameInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameInfo>> GetGameStateAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get all games
        /// </summary>
        /// <remarks>
        /// Returns a list of all hosted games
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetGamesAsync (bool? joinable = default(bool?), bool? unprotected = default(bool?));

        /// <summary>
        /// Get all games
        /// </summary>
        /// <remarks>
        /// Returns a list of all hosted games
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetGamesAsyncWithHttpInfo (bool? joinable = default(bool?), bool? unprotected = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApi : IGameApiSync, IGameApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameApi : IGameApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi(String basePath)
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GameApi(Tgm.Roborally.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GameApi(Tgm.Roborally.Api.Client.ISynchronousClient client,Tgm.Roborally.Api.Client.IAsynchronousClient asyncClient, Tgm.Roborally.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Commit Action Queues an action to be executed
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        public void CommitAction (string gameId, ActionType action)
        {
             CommitActionWithHttpInfo(gameId, action);
        }

        /// <summary>
        /// Commit Action Queues an action to be executed
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> CommitActionWithHttpInfo (string gameId, ActionType action)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->CommitAction");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'action' when calling GameApi->CommitAction");

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (gameId != null)
                localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (action != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "action", action))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/games/{game_id}/actions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommitAction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Commit Action Queues an action to be executed
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommitActionAsync (string gameId, ActionType action)
        {
             await CommitActionAsyncWithHttpInfo(gameId, action);

        }

        /// <summary>
        /// Commit Action Queues an action to be executed
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="action"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> CommitActionAsyncWithHttpInfo (string gameId, ActionType action)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->CommitAction");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'action' when calling GameApi->CommitAction");


            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (gameId != null)
                localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (action != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "action", action))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/games/{game_id}/actions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommitAction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Game Creates a random game by your defined rules
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns></returns>
        public void CreateGame (GameRules gameRules = default(GameRules))
        {
             CreateGameWithHttpInfo(gameRules);
        }

        /// <summary>
        /// Create Game Creates a random game by your defined rules
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> CreateGameWithHttpInfo (GameRules gameRules = default(GameRules))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameRules;

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/games/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Game Creates a random game by your defined rules
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateGameAsync (GameRules gameRules = default(GameRules))
        {
             await CreateGameAsyncWithHttpInfo(gameRules);

        }

        /// <summary>
        /// Create Game Creates a random game by your defined rules
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameRules">*Optional* This rules define how your game will behave (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> CreateGameAsyncWithHttpInfo (GameRules gameRules = default(GameRules))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = gameRules;

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/games/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get games actions Get all (**not robot related**) actions comitted to this game.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;Action&gt;</returns>
        public List<Tgm.Roborally.Api.Model.Action> GetActions (string gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<Tgm.Roborally.Api.Model.Action>> localVarResponse = GetActionsWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get games actions Get all (**not robot related**) actions comitted to this game.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;Action&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<Tgm.Roborally.Api.Model.Action> > GetActionsWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetActions");

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (gameId != null)
                localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Tgm.Roborally.Api.Model.Action> >("/games/{game_id}/actions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get games actions Get all (**not robot related**) actions comitted to this game.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;Action&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tgm.Roborally.Api.Model.Action>> GetActionsAsync (string gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<Tgm.Roborally.Api.Model.Action>> localVarResponse = await GetActionsAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get games actions Get all (**not robot related**) actions comitted to this game.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;Action&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<Tgm.Roborally.Api.Model.Action>>> GetActionsAsyncWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new Tgm.Roborally.Api.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetActions");


            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (gameId != null)
                localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (Host-token-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "hid", this.Configuration.GetApiKeyWithPrefix("hid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tgm.Roborally.Api.Model.Action>>("/games/{game_id}/actions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get game status Returns the status of a game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>GameInfo</returns>
        public GameInfo GetGameState (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<GameInfo> localVarResponse = GetGameStateWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get game status Returns the status of a game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of GameInfo</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< GameInfo > GetGameStateWithHttpInfo (int gameId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (Player-Token-Access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("uid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "uid", this.Configuration.GetApiKeyWithPrefix("uid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GameInfo >("/games/{game_id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get game status Returns the status of a game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of GameInfo</returns>
        public async System.Threading.Tasks.Task<GameInfo> GetGameStateAsync (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<GameInfo> localVarResponse = await GetGameStateAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get game status Returns the status of a game
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (GameInfo)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<GameInfo>> GetGameStateAsyncWithHttpInfo (int gameId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (Player-Token-Access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("uid")))
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "uid", this.Configuration.GetApiKeyWithPrefix("uid")))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameInfo>("/games/{game_id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all games Returns a list of all hosted games
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetGames (bool? joinable = default(bool?), bool? unprotected = default(bool?))
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = GetGamesWithHttpInfo(joinable, unprotected);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all games Returns a list of all hosted games
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<int> > GetGamesWithHttpInfo (bool? joinable = default(bool?), bool? unprotected = default(bool?))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (joinable != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "joinable", joinable))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (unprotected != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "unprotected", unprotected))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<int> >("/games/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all games Returns a list of all hosted games
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetGamesAsync (bool? joinable = default(bool?), bool? unprotected = default(bool?))
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = await GetGamesAsyncWithHttpInfo(joinable, unprotected);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all games Returns a list of all hosted games
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="joinable">true: only return joinable games (optional, default to false)</param>
        /// <param name="unprotected">true: only display games with no password set (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<int>>> GetGamesAsyncWithHttpInfo (bool? joinable = default(bool?), bool? unprotected = default(bool?))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (joinable != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "joinable", joinable))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (unprotected != null)
            {
                foreach (var _kvp in Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "unprotected", unprotected))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/games/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
