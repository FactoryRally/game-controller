/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpgradesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Buy Upgrade
        /// </summary>
        /// <remarks>
        /// Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns></returns>
        void BuyUpgrade (int gameId, int upgrade, int? exchange = default(int?));

        /// <summary>
        /// Buy Upgrade
        /// </summary>
        /// <remarks>
        /// Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuyUpgradeWithHttpInfo (int gameId, int upgrade, int? exchange = default(int?));
        /// <summary>
        /// get all Upgrades
        /// </summary>
        /// <remarks>
        /// Returns a list of all Upgrade IDs
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetAllUpgradeIDs (int gameId);

        /// <summary>
        /// get all Upgrades
        /// </summary>
        /// <remarks>
        /// Returns a list of all Upgrade IDs
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetAllUpgradeIDsWithHttpInfo (int gameId);
        /// <summary>
        /// Get upgrade information
        /// </summary>
        /// <remarks>
        /// Get detailed information about the Upgrade
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Upgrade</returns>
        Upgrade GetUpgradeInformation (int gameId, int upgradeId);

        /// <summary>
        /// Get upgrade information
        /// </summary>
        /// <remarks>
        /// Get detailed information about the Upgrade
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>ApiResponse of Upgrade</returns>
        ApiResponse<Upgrade> GetUpgradeInformationWithHttpInfo (int gameId, int upgradeId);
        /// <summary>
        /// Get upgrade shop
        /// </summary>
        /// <remarks>
        /// Retuns a list of all cards in the upgrade shop
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>UpgradeShop</returns>
        UpgradeShop GetUpgradeShop (int gameId);

        /// <summary>
        /// Get upgrade shop
        /// </summary>
        /// <remarks>
        /// Retuns a list of all cards in the upgrade shop
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of UpgradeShop</returns>
        ApiResponse<UpgradeShop> GetUpgradeShopWithHttpInfo (int gameId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Buy Upgrade
        /// </summary>
        /// <remarks>
        /// Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuyUpgradeAsync (int gameId, int upgrade, int? exchange = default(int?));

        /// <summary>
        /// Buy Upgrade
        /// </summary>
        /// <remarks>
        /// Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuyUpgradeAsyncWithHttpInfo (int gameId, int upgrade, int? exchange = default(int?));
        /// <summary>
        /// get all Upgrades
        /// </summary>
        /// <remarks>
        /// Returns a list of all Upgrade IDs
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetAllUpgradeIDsAsync (int gameId);

        /// <summary>
        /// get all Upgrades
        /// </summary>
        /// <remarks>
        /// Returns a list of all Upgrade IDs
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetAllUpgradeIDsAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get upgrade information
        /// </summary>
        /// <remarks>
        /// Get detailed information about the Upgrade
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Task of Upgrade</returns>
        System.Threading.Tasks.Task<Upgrade> GetUpgradeInformationAsync (int gameId, int upgradeId);

        /// <summary>
        /// Get upgrade information
        /// </summary>
        /// <remarks>
        /// Get detailed information about the Upgrade
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Task of ApiResponse (Upgrade)</returns>
        System.Threading.Tasks.Task<ApiResponse<Upgrade>> GetUpgradeInformationAsyncWithHttpInfo (int gameId, int upgradeId);
        /// <summary>
        /// Get upgrade shop
        /// </summary>
        /// <remarks>
        /// Retuns a list of all cards in the upgrade shop
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of UpgradeShop</returns>
        System.Threading.Tasks.Task<UpgradeShop> GetUpgradeShopAsync (int gameId);

        /// <summary>
        /// Get upgrade shop
        /// </summary>
        /// <remarks>
        /// Retuns a list of all cards in the upgrade shop
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (UpgradeShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpgradeShop>> GetUpgradeShopAsyncWithHttpInfo (int gameId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UpgradesApi : IUpgradesApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UpgradesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpgradesApi(String basePath)
        {
            this.Configuration = new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpgradesApi"/> class
        /// </summary>
        /// <returns></returns>
        public UpgradesApi()
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpgradesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UpgradesApi(Tgm.Roborally.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Buy Upgrade Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns></returns>
        public void BuyUpgrade (int gameId, int upgrade, int? exchange = default(int?))
        {
             BuyUpgradeWithHttpInfo(gameId, upgrade, exchange);
        }

        /// <summary>
        /// Buy Upgrade Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BuyUpgradeWithHttpInfo (int gameId, int upgrade, int? exchange = default(int?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->BuyUpgrade");
            // verify the required parameter 'upgrade' is set
            if (upgrade == null)
                throw new ApiException(400, "Missing required parameter 'upgrade' when calling UpgradesApi->BuyUpgrade");

            var localVarPath = "/games/{game_id}/upgrades/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (upgrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upgrade", upgrade)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyUpgrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Buy Upgrade Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuyUpgradeAsync (int gameId, int upgrade, int? exchange = default(int?))
        {
             await BuyUpgradeAsyncWithHttpInfo(gameId, upgrade, exchange);

        }

        /// <summary>
        /// Buy Upgrade Buy this Upgrade from the shop. ### Note If your robot allready owns 3 Upgrades you have to use the &#x60;exchange&#x60; parameter. This is the ID of the Upgrade to replace with the bought one
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgrade"></param>
        /// <param name="exchange"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BuyUpgradeAsyncWithHttpInfo (int gameId, int upgrade, int? exchange = default(int?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->BuyUpgrade");
            // verify the required parameter 'upgrade' is set
            if (upgrade == null)
                throw new ApiException(400, "Missing required parameter 'upgrade' when calling UpgradesApi->BuyUpgrade");

            var localVarPath = "/games/{game_id}/upgrades/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (upgrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upgrade", upgrade)); // query parameter
            if (exchange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange", exchange)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyUpgrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get all Upgrades Returns a list of all Upgrade IDs
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetAllUpgradeIDs (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = GetAllUpgradeIDsWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all Upgrades Returns a list of all Upgrade IDs
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public ApiResponse<List<int>> GetAllUpgradeIDsWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetAllUpgradeIDs");

            var localVarPath = "/games/{game_id}/upgrades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUpgradeIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// get all Upgrades Returns a list of all Upgrade IDs
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetAllUpgradeIDsAsync (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = await GetAllUpgradeIDsAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all Upgrades Returns a list of all Upgrade IDs
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int>>> GetAllUpgradeIDsAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetAllUpgradeIDs");

            var localVarPath = "/games/{game_id}/upgrades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUpgradeIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get upgrade information Get detailed information about the Upgrade
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Upgrade</returns>
        public Upgrade GetUpgradeInformation (int gameId, int upgradeId)
        {
             ApiResponse<Upgrade> localVarResponse = GetUpgradeInformationWithHttpInfo(gameId, upgradeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get upgrade information Get detailed information about the Upgrade
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>ApiResponse of Upgrade</returns>
        public ApiResponse<Upgrade> GetUpgradeInformationWithHttpInfo (int gameId, int upgradeId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetUpgradeInformation");
            // verify the required parameter 'upgradeId' is set
            if (upgradeId == null)
                throw new ApiException(400, "Missing required parameter 'upgradeId' when calling UpgradesApi->GetUpgradeInformation");

            var localVarPath = "/games/{game_id}/upgrades/{upgrade_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (upgradeId != null) localVarPathParams.Add("upgrade_id", this.Configuration.ApiClient.ParameterToString(upgradeId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpgradeInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upgrade>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Upgrade) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upgrade)));
        }

        /// <summary>
        /// Get upgrade information Get detailed information about the Upgrade
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Task of Upgrade</returns>
        public async System.Threading.Tasks.Task<Upgrade> GetUpgradeInformationAsync (int gameId, int upgradeId)
        {
             ApiResponse<Upgrade> localVarResponse = await GetUpgradeInformationAsyncWithHttpInfo(gameId, upgradeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get upgrade information Get detailed information about the Upgrade
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="upgradeId"></param>
        /// <returns>Task of ApiResponse (Upgrade)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Upgrade>> GetUpgradeInformationAsyncWithHttpInfo (int gameId, int upgradeId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetUpgradeInformation");
            // verify the required parameter 'upgradeId' is set
            if (upgradeId == null)
                throw new ApiException(400, "Missing required parameter 'upgradeId' when calling UpgradesApi->GetUpgradeInformation");

            var localVarPath = "/games/{game_id}/upgrades/{upgrade_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (upgradeId != null) localVarPathParams.Add("upgrade_id", this.Configuration.ApiClient.ParameterToString(upgradeId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpgradeInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Upgrade>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Upgrade) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Upgrade)));
        }

        /// <summary>
        /// Get upgrade shop Retuns a list of all cards in the upgrade shop
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>UpgradeShop</returns>
        public UpgradeShop GetUpgradeShop (int gameId)
        {
             ApiResponse<UpgradeShop> localVarResponse = GetUpgradeShopWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get upgrade shop Retuns a list of all cards in the upgrade shop
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of UpgradeShop</returns>
        public ApiResponse<UpgradeShop> GetUpgradeShopWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetUpgradeShop");

            var localVarPath = "/games/{game_id}/upgrades/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpgradeShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpgradeShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpgradeShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpgradeShop)));
        }

        /// <summary>
        /// Get upgrade shop Retuns a list of all cards in the upgrade shop
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of UpgradeShop</returns>
        public async System.Threading.Tasks.Task<UpgradeShop> GetUpgradeShopAsync (int gameId)
        {
             ApiResponse<UpgradeShop> localVarResponse = await GetUpgradeShopAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get upgrade shop Retuns a list of all cards in the upgrade shop
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (UpgradeShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpgradeShop>> GetUpgradeShopAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling UpgradesApi->GetUpgradeShop");

            var localVarPath = "/games/{game_id}/upgrades/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpgradeShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpgradeShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpgradeShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpgradeShop)));
        }

    }
}
