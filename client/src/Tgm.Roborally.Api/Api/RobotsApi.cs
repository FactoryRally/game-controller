/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRobotsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        void ClearRegisters (int gameId, int robotId);

        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearRegistersWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        void ClearUpgrades (int gameId, int robotId);

        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearUpgradesWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns></returns>
        void DoEntityAction (int gameId, string robotId, EntityAction entityAction = default(EntityAction));

        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoEntityActionWithHttpInfo (int gameId, string robotId, EntityAction entityAction = default(EntityAction));
        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;EntityAction&gt;</returns>
        List<EntityAction> GetActionStack (int gameId, string robotId);

        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;EntityAction&gt;</returns>
        ApiResponse<List<EntityAction>> GetActionStackWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetInstalledUpgrades (int gameId, int robotId);

        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetInstalledUpgradesWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;EntityEventOportunity&gt;</returns>
        List<EntityEventOportunity> GetPossibleActions (int gameId, string robotId);

        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;EntityEventOportunity&gt;</returns>
        ApiResponse<List<EntityEventOportunity>> GetPossibleActionsWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        List<RobotCommand> GetRegisters (int gameId, int robotId);

        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        ApiResponse<List<RobotCommand>> GetRegistersWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>RobotInfo</returns>
        RobotInfo GetRobotStats (int gameId, string robotId);

        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of RobotInfo</returns>
        ApiResponse<RobotInfo> GetRobotStatsWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetRobots (int gameId);

        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetRobotsWithHttpInfo (int gameId);
        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns></returns>
        void RemoveRobotUpgrade (int gameId, int robotId, int? upgrade = default(int?));

        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRobotUpgradeWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?));
        /// <summary>
        /// change register content
        /// </summary>
        /// <remarks>
        /// Updates the card in a register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        void UpdateRegister (int gameId, int robotId);

        /// <summary>
        /// change register content
        /// </summary>
        /// <remarks>
        /// Updates the card in a register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRegisterWithHttpInfo (int gameId, int robotId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearRegistersAsync (int gameId, int robotId);

        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearRegistersAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearUpgradesAsync (int gameId, int robotId);

        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearUpgradesAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoEntityActionAsync (int gameId, string robotId, EntityAction entityAction = default(EntityAction));

        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoEntityActionAsyncWithHttpInfo (int gameId, string robotId, EntityAction entityAction = default(EntityAction));
        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;EntityAction&gt;</returns>
        System.Threading.Tasks.Task<List<EntityAction>> GetActionStackAsync (int gameId, string robotId);

        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;EntityAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityAction>>> GetActionStackAsyncWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetInstalledUpgradesAsync (int gameId, int robotId);

        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetInstalledUpgradesAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;EntityEventOportunity&gt;</returns>
        System.Threading.Tasks.Task<List<EntityEventOportunity>> GetPossibleActionsAsync (int gameId, string robotId);

        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;EntityEventOportunity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityEventOportunity>>> GetPossibleActionsAsyncWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        System.Threading.Tasks.Task<List<RobotCommand>> GetRegistersAsync (int gameId, int robotId);

        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RobotCommand>>> GetRegistersAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of RobotInfo</returns>
        System.Threading.Tasks.Task<RobotInfo> GetRobotStatsAsync (int gameId, string robotId);

        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (RobotInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotInfo>> GetRobotStatsAsyncWithHttpInfo (int gameId, string robotId);
        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetRobotsAsync (int gameId);

        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetRobotsAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRobotUpgradeAsync (int gameId, int robotId, int? upgrade = default(int?));

        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRobotUpgradeAsyncWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?));
        /// <summary>
        /// change register content
        /// </summary>
        /// <remarks>
        /// Updates the card in a register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRegisterAsync (int gameId, int robotId);

        /// <summary>
        /// change register content
        /// </summary>
        /// <remarks>
        /// Updates the card in a register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRegisterAsyncWithHttpInfo (int gameId, int robotId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RobotsApi : IRobotsApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RobotsApi(String basePath)
        {
            this.Configuration = new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class
        /// </summary>
        /// <returns></returns>
        public RobotsApi()
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RobotsApi(Tgm.Roborally.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        public void ClearRegisters (int gameId, int robotId)
        {
             ClearRegistersWithHttpInfo(gameId, robotId);
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearRegistersWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->ClearRegisters");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->ClearRegisters");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearRegisters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearRegistersAsync (int gameId, int robotId)
        {
             await ClearRegistersAsyncWithHttpInfo(gameId, robotId);

        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearRegistersAsyncWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->ClearRegisters");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->ClearRegisters");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearRegisters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        public void ClearUpgrades (int gameId, int robotId)
        {
             ClearUpgradesWithHttpInfo(gameId, robotId);
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearUpgradesWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->ClearUpgrades");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->ClearUpgrades");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearUpgrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearUpgradesAsync (int gameId, int robotId)
        {
             await ClearUpgradesAsyncWithHttpInfo(gameId, robotId);

        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearUpgradesAsyncWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->ClearUpgrades");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->ClearUpgrades");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearUpgrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns></returns>
        public void DoEntityAction (int gameId, string robotId, EntityAction entityAction = default(EntityAction))
        {
             DoEntityActionWithHttpInfo(gameId, robotId, entityAction);
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoEntityActionWithHttpInfo (int gameId, string robotId, EntityAction entityAction = default(EntityAction))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->DoEntityAction");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->DoEntityAction");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/stack/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (entityAction != null && entityAction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityAction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityAction; // byte array
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEntityAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoEntityActionAsync (int gameId, string robotId, EntityAction entityAction = default(EntityAction))
        {
             await DoEntityActionAsyncWithHttpInfo(gameId, robotId, entityAction);

        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoEntityActionAsyncWithHttpInfo (int gameId, string robotId, EntityAction entityAction = default(EntityAction))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->DoEntityAction");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->DoEntityAction");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/stack/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (entityAction != null && entityAction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityAction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityAction; // byte array
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEntityAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;EntityAction&gt;</returns>
        public List<EntityAction> GetActionStack (int gameId, string robotId)
        {
             ApiResponse<List<EntityAction>> localVarResponse = GetActionStackWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;EntityAction&gt;</returns>
        public ApiResponse<List<EntityAction>> GetActionStackWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetActionStack");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetActionStack");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/stack/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActionStack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EntityAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityAction>)));
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;EntityAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityAction>> GetActionStackAsync (int gameId, string robotId)
        {
             ApiResponse<List<EntityAction>> localVarResponse = await GetActionStackAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;EntityAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityAction>>> GetActionStackAsyncWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetActionStack");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetActionStack");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/stack/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActionStack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EntityAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityAction>)));
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetInstalledUpgrades (int gameId, int robotId)
        {
             ApiResponse<List<int>> localVarResponse = GetInstalledUpgradesWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public ApiResponse<List<int>> GetInstalledUpgradesWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetInstalledUpgrades");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetInstalledUpgrades");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstalledUpgrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetInstalledUpgradesAsync (int gameId, int robotId)
        {
             ApiResponse<List<int>> localVarResponse = await GetInstalledUpgradesAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int>>> GetInstalledUpgradesAsyncWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetInstalledUpgrades");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetInstalledUpgrades");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstalledUpgrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;EntityEventOportunity&gt;</returns>
        public List<EntityEventOportunity> GetPossibleActions (int gameId, string robotId)
        {
             ApiResponse<List<EntityEventOportunity>> localVarResponse = GetPossibleActionsWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;EntityEventOportunity&gt;</returns>
        public ApiResponse<List<EntityEventOportunity>> GetPossibleActionsWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetPossibleActions");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetPossibleActions");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/avinable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPossibleActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityEventOportunity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EntityEventOportunity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityEventOportunity>)));
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;EntityEventOportunity&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityEventOportunity>> GetPossibleActionsAsync (int gameId, string robotId)
        {
             ApiResponse<List<EntityEventOportunity>> localVarResponse = await GetPossibleActionsAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;EntityEventOportunity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityEventOportunity>>> GetPossibleActionsAsyncWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetPossibleActions");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetPossibleActions");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/actions/avinable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPossibleActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityEventOportunity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EntityEventOportunity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityEventOportunity>)));
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        public List<RobotCommand> GetRegisters (int gameId, int robotId)
        {
             ApiResponse<List<RobotCommand>> localVarResponse = GetRegistersWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        public ApiResponse<List<RobotCommand>> GetRegistersWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRegisters");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetRegisters");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotCommand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RobotCommand>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotCommand>)));
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        public async System.Threading.Tasks.Task<List<RobotCommand>> GetRegistersAsync (int gameId, int robotId)
        {
             ApiResponse<List<RobotCommand>> localVarResponse = await GetRegistersAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RobotCommand>>> GetRegistersAsyncWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRegisters");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetRegisters");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotCommand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RobotCommand>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotCommand>)));
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>RobotInfo</returns>
        public RobotInfo GetRobotStats (int gameId, string robotId)
        {
             ApiResponse<RobotInfo> localVarResponse = GetRobotStatsWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of RobotInfo</returns>
        public ApiResponse<RobotInfo> GetRobotStatsWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRobotStats");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetRobotStats");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRobotStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RobotInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotInfo)));
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of RobotInfo</returns>
        public async System.Threading.Tasks.Task<RobotInfo> GetRobotStatsAsync (int gameId, string robotId)
        {
             ApiResponse<RobotInfo> localVarResponse = await GetRobotStatsAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse (RobotInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotInfo>> GetRobotStatsAsyncWithHttpInfo (int gameId, string robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRobotStats");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->GetRobotStats");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRobotStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RobotInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotInfo)));
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetRobots (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = GetRobotsWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public ApiResponse<List<int>> GetRobotsWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRobots");

            var localVarPath = "/games/{game_id}/entitys/robots/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRobots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetRobotsAsync (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = await GetRobotsAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int>>> GetRobotsAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->GetRobots");

            var localVarPath = "/games/{game_id}/entitys/robots/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRobots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns></returns>
        public void RemoveRobotUpgrade (int gameId, int robotId, int? upgrade = default(int?))
        {
             RemoveRobotUpgradeWithHttpInfo(gameId, robotId, upgrade);
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveRobotUpgradeWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->RemoveRobotUpgrade");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->RemoveRobotUpgrade");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (upgrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upgrade", upgrade)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRobotUpgrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRobotUpgradeAsync (int gameId, int robotId, int? upgrade = default(int?))
        {
             await RemoveRobotUpgradeAsyncWithHttpInfo(gameId, robotId, upgrade);

        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <param name="upgrade"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRobotUpgradeAsyncWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->RemoveRobotUpgrade");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->RemoveRobotUpgrade");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/upgrades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (upgrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upgrade", upgrade)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRobotUpgrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// change register content Updates the card in a register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns></returns>
        public void UpdateRegister (int gameId, int robotId)
        {
             UpdateRegisterWithHttpInfo(gameId, robotId);
        }

        /// <summary>
        /// change register content Updates the card in a register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRegisterWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->UpdateRegister");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->UpdateRegister");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRegister", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// change register content Updates the card in a register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRegisterAsync (int gameId, int robotId)
        {
             await UpdateRegisterAsyncWithHttpInfo(gameId, robotId);

        }

        /// <summary>
        /// change register content Updates the card in a register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="robotId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRegisterAsyncWithHttpInfo (int gameId, int robotId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling RobotsApi->UpdateRegister");
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling RobotsApi->UpdateRegister");

            var localVarPath = "/games/{game_id}/entitys/robots/{robot_id}/registers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (robotId != null) localVarPathParams.Add("robot_id", this.Configuration.ApiClient.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRegister", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
