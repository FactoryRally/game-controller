/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns></returns>
        void ChooseRobot (int gameId, int playerId, List<Robots> robots = default(List<Robots>));

        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChooseRobotWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>));
        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetAllPlayers (int gameId);

        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetAllPlayersWithHttpInfo (int gameId);
        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Player</returns>
        Player GetPlayer (int gameId, int playerId);

        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> GetPlayerWithHttpInfo (int gameId, int playerId);
        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>JoinResponse</returns>
        JoinResponse Join (int gameId, string password = default(string));

        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        ApiResponse<JoinResponse> JoinWithHttpInfo (int gameId, string password = default(string));
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns></returns>
        void KickPlayer (int gameId, int playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KickPlayerWithHttpInfo (int gameId, int playerId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChooseRobotAsync (int gameId, int playerId, List<Robots> robots = default(List<Robots>));

        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChooseRobotAsyncWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>));
        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetAllPlayersAsync (int gameId);

        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetAllPlayersAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> GetPlayerAsync (int gameId, int playerId);

        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerAsyncWithHttpInfo (int gameId, int playerId);
        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        System.Threading.Tasks.Task<JoinResponse> JoinAsync (int gameId, string password = default(string));

        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JoinResponse>> JoinAsyncWithHttpInfo (int gameId, string password = default(string));
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KickPlayerAsync (int gameId, int playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KickPlayerAsyncWithHttpInfo (int gameId, int playerId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayersApi : IPlayersApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(String basePath)
        {
            this.Configuration = new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlayersApi()
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayersApi(Tgm.Roborally.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns></returns>
        public void ChooseRobot (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
             ChooseRobotWithHttpInfo(gameId, playerId, robots);
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChooseRobotWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->ChooseRobot");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->ChooseRobot");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (robots != null && robots.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(robots); // http body (model) parameter
            }
            else
            {
                localVarPostBody = robots; // byte array
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChooseRobot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChooseRobotAsync (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
             await ChooseRobotAsyncWithHttpInfo(gameId, playerId, robots);

        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChooseRobotAsyncWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->ChooseRobot");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->ChooseRobot");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (robots != null && robots.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(robots); // http body (model) parameter
            }
            else
            {
                localVarPostBody = robots; // byte array
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChooseRobot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetAllPlayers (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = GetAllPlayersWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public ApiResponse<List<int>> GetAllPlayersWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->GetAllPlayers");

            var localVarPath = "/games/{game_id}/players/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetAllPlayersAsync (int gameId)
        {
             ApiResponse<List<int>> localVarResponse = await GetAllPlayersAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int>>> GetAllPlayersAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->GetAllPlayers");

            var localVarPath = "/games/{game_id}/players/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int>)));
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Player</returns>
        public Player GetPlayer (int gameId, int playerId)
        {
             ApiResponse<Player> localVarResponse = GetPlayerWithHttpInfo(gameId, playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>ApiResponse of Player</returns>
        public ApiResponse<Player> GetPlayerWithHttpInfo (int gameId, int playerId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->GetPlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->GetPlayer");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Player) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerAsync (int gameId, int playerId)
        {
             ApiResponse<Player> localVarResponse = await GetPlayerAsyncWithHttpInfo(gameId, playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerAsyncWithHttpInfo (int gameId, int playerId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->GetPlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->GetPlayer");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Player) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>JoinResponse</returns>
        public JoinResponse Join (int gameId, string password = default(string))
        {
             ApiResponse<JoinResponse> localVarResponse = JoinWithHttpInfo(gameId, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        public ApiResponse<JoinResponse> JoinWithHttpInfo (int gameId, string password = default(string))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->Join");

            var localVarPath = "/games/{game_id}/players/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Join", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JoinResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JoinResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JoinResponse)));
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        public async System.Threading.Tasks.Task<JoinResponse> JoinAsync (int gameId, string password = default(string))
        {
             ApiResponse<JoinResponse> localVarResponse = await JoinAsyncWithHttpInfo(gameId, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JoinResponse>> JoinAsyncWithHttpInfo (int gameId, string password = default(string))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->Join");

            var localVarPath = "/games/{game_id}/players/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Join", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JoinResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JoinResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JoinResponse)));
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns></returns>
        public void KickPlayer (int gameId, int playerId)
        {
             KickPlayerWithHttpInfo(gameId, playerId);
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> KickPlayerWithHttpInfo (int gameId, int playerId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->KickPlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->KickPlayer");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter

            // authentication (admin-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("skey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skey", this.Configuration.GetApiKeyWithPrefix("skey")));
            }
            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KickPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KickPlayerAsync (int gameId, int playerId)
        {
             await KickPlayerAsyncWithHttpInfo(gameId, playerId);

        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="playerId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> KickPlayerAsyncWithHttpInfo (int gameId, int playerId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling PlayersApi->KickPlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->KickPlayer");

            var localVarPath = "/games/{game_id}/players/{player_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("player_id", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter

            // authentication (admin-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("skey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skey", this.Configuration.GetApiKeyWithPrefix("skey")));
            }
            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KickPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
