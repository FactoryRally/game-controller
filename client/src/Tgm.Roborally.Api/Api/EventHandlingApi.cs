/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventHandlingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get next / last damage event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>DamageEvent</returns>
        DamageEvent FetchNextDamageEvent (int gameId);

        /// <summary>
        /// Get next / last damage event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of DamageEvent</returns>
        ApiResponse<DamageEvent> FetchNextDamageEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the ***any*** type.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>GenericEvent</returns>
        GenericEvent FetchNextEvent (string gameId);

        /// <summary>
        /// Get next event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the ***any*** type.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of GenericEvent</returns>
        ApiResponse<GenericEvent> FetchNextEventWithHttpInfo (string gameId);
        /// <summary>
        /// Get next / last Lazer hit event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>LazerHitEvent</returns>
        LazerHitEvent FetchNextLazerHitEvent (int gameId);

        /// <summary>
        /// Get next / last Lazer hit event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of LazerHitEvent</returns>
        ApiResponse<LazerHitEvent> FetchNextLazerHitEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last map event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MapEvent</returns>
        MapEvent FetchNextMapEvent (int gameId);

        /// <summary>
        /// Get next / last map event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MapEvent</returns>
        ApiResponse<MapEvent> FetchNextMapEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last movement event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MovementEvent</returns>
        MovementEvent FetchNextMovementEvent (int gameId);

        /// <summary>
        /// Get next / last movement event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MovementEvent</returns>
        ApiResponse<MovementEvent> FetchNextMovementEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last push event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>PushEvent</returns>
        PushEvent FetchNextPushEvent (int gameId);

        /// <summary>
        /// Get next / last push event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of PushEvent</returns>
        ApiResponse<PushEvent> FetchNextPushEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last shoot event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ShootEvent</returns>
        ShootEvent FetchNextShootEvent (int gameId);

        /// <summary>
        /// Get next / last shoot event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of ShootEvent</returns>
        ApiResponse<ShootEvent> FetchNextShootEventWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last shutdown event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ShutdownEvent</returns>
        ShutdownEvent FetchNextShutdownEvent (int gameId);

        /// <summary>
        /// Get next / last shutdown event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of ShutdownEvent</returns>
        ApiResponse<ShutdownEvent> FetchNextShutdownEventWithHttpInfo (int gameId);
        /// <summary>
        /// trace event
        /// </summary>
        /// <remarks>
        /// All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>List&lt;EventType&gt;</returns>
        List<EventType> TraceEvent (int gameId, bool wait, bool? batch = default(bool?));

        /// <summary>
        /// trace event
        /// </summary>
        /// <remarks>
        /// All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;EventType&gt;</returns>
        ApiResponse<List<EventType>> TraceEventWithHttpInfo (int gameId, bool wait, bool? batch = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get next / last damage event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of DamageEvent</returns>
        System.Threading.Tasks.Task<DamageEvent> FetchNextDamageEventAsync (int gameId);

        /// <summary>
        /// Get next / last damage event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (DamageEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<DamageEvent>> FetchNextDamageEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the ***any*** type.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of GenericEvent</returns>
        System.Threading.Tasks.Task<GenericEvent> FetchNextEventAsync (string gameId);

        /// <summary>
        /// Get next event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the ***any*** type.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (GenericEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericEvent>> FetchNextEventAsyncWithHttpInfo (string gameId);
        /// <summary>
        /// Get next / last Lazer hit event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of LazerHitEvent</returns>
        System.Threading.Tasks.Task<LazerHitEvent> FetchNextLazerHitEventAsync (int gameId);

        /// <summary>
        /// Get next / last Lazer hit event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (LazerHitEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<LazerHitEvent>> FetchNextLazerHitEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last map event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MapEvent</returns>
        System.Threading.Tasks.Task<MapEvent> FetchNextMapEventAsync (int gameId);

        /// <summary>
        /// Get next / last map event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MapEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapEvent>> FetchNextMapEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last movement event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MovementEvent</returns>
        System.Threading.Tasks.Task<MovementEvent> FetchNextMovementEventAsync (int gameId);

        /// <summary>
        /// Get next / last movement event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MovementEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<MovementEvent>> FetchNextMovementEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last push event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of PushEvent</returns>
        System.Threading.Tasks.Task<PushEvent> FetchNextPushEventAsync (int gameId);

        /// <summary>
        /// Get next / last push event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (PushEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<PushEvent>> FetchNextPushEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last shoot event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ShootEvent</returns>
        System.Threading.Tasks.Task<ShootEvent> FetchNextShootEventAsync (int gameId);

        /// <summary>
        /// Get next / last shoot event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (ShootEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShootEvent>> FetchNextShootEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get next / last shutdown event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ShutdownEvent</returns>
        System.Threading.Tasks.Task<ShutdownEvent> FetchNextShutdownEventAsync (int gameId);

        /// <summary>
        /// Get next / last shutdown event
        /// </summary>
        /// <remarks>
        /// Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (ShutdownEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShutdownEvent>> FetchNextShutdownEventAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// trace event
        /// </summary>
        /// <remarks>
        /// All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>Task of List&lt;EventType&gt;</returns>
        System.Threading.Tasks.Task<List<EventType>> TraceEventAsync (int gameId, bool wait, bool? batch = default(bool?));

        /// <summary>
        /// trace event
        /// </summary>
        /// <remarks>
        /// All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;EventType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventType>>> TraceEventAsyncWithHttpInfo (int gameId, bool wait, bool? batch = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventHandlingApi : IEventHandlingApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandlingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventHandlingApi(String basePath)
        {
            this.Configuration = new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandlingApi"/> class
        /// </summary>
        /// <returns></returns>
        public EventHandlingApi()
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandlingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventHandlingApi(Tgm.Roborally.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tgm.Roborally.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get next / last damage event Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>DamageEvent</returns>
        public DamageEvent FetchNextDamageEvent (int gameId)
        {
             ApiResponse<DamageEvent> localVarResponse = FetchNextDamageEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last damage event Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of DamageEvent</returns>
        public ApiResponse<DamageEvent> FetchNextDamageEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextDamageEvent");

            var localVarPath = "/games/{game_id}/events/damage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextDamageEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DamageEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DamageEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DamageEvent)));
        }

        /// <summary>
        /// Get next / last damage event Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of DamageEvent</returns>
        public async System.Threading.Tasks.Task<DamageEvent> FetchNextDamageEventAsync (int gameId)
        {
             ApiResponse<DamageEvent> localVarResponse = await FetchNextDamageEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last damage event Returns the next unfetched event of the damage type.  If the event is not of the damage type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (DamageEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DamageEvent>> FetchNextDamageEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextDamageEvent");

            var localVarPath = "/games/{game_id}/events/damage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextDamageEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DamageEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DamageEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DamageEvent)));
        }

        /// <summary>
        /// Get next event Returns the next unfetched event of the ***any*** type.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>GenericEvent</returns>
        public GenericEvent FetchNextEvent (string gameId)
        {
             ApiResponse<GenericEvent> localVarResponse = FetchNextEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next event Returns the next unfetched event of the ***any*** type.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of GenericEvent</returns>
        public ApiResponse<GenericEvent> FetchNextEventWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextEvent");

            var localVarPath = "/games/{game_id}/events/head";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericEvent)));
        }

        /// <summary>
        /// Get next event Returns the next unfetched event of the ***any*** type.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of GenericEvent</returns>
        public async System.Threading.Tasks.Task<GenericEvent> FetchNextEventAsync (string gameId)
        {
             ApiResponse<GenericEvent> localVarResponse = await FetchNextEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next event Returns the next unfetched event of the ***any*** type.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (GenericEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericEvent>> FetchNextEventAsyncWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextEvent");

            var localVarPath = "/games/{game_id}/events/head";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericEvent)));
        }

        /// <summary>
        /// Get next / last Lazer hit event Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>LazerHitEvent</returns>
        public LazerHitEvent FetchNextLazerHitEvent (int gameId)
        {
             ApiResponse<LazerHitEvent> localVarResponse = FetchNextLazerHitEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last Lazer hit event Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of LazerHitEvent</returns>
        public ApiResponse<LazerHitEvent> FetchNextLazerHitEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextLazerHitEvent");

            var localVarPath = "/games/{game_id}/events/lazer-hit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextLazerHitEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LazerHitEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LazerHitEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LazerHitEvent)));
        }

        /// <summary>
        /// Get next / last Lazer hit event Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of LazerHitEvent</returns>
        public async System.Threading.Tasks.Task<LazerHitEvent> FetchNextLazerHitEventAsync (int gameId)
        {
             ApiResponse<LazerHitEvent> localVarResponse = await FetchNextLazerHitEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last Lazer hit event Returns the next unfetched event of the lazer hit type.  If the event is not of the lazer hit type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (LazerHitEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LazerHitEvent>> FetchNextLazerHitEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextLazerHitEvent");

            var localVarPath = "/games/{game_id}/events/lazer-hit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextLazerHitEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LazerHitEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LazerHitEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LazerHitEvent)));
        }

        /// <summary>
        /// Get next / last map event Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MapEvent</returns>
        public MapEvent FetchNextMapEvent (int gameId)
        {
             ApiResponse<MapEvent> localVarResponse = FetchNextMapEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last map event Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MapEvent</returns>
        public ApiResponse<MapEvent> FetchNextMapEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextMapEvent");

            var localVarPath = "/games/{game_id}/events/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextMapEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapEvent)));
        }

        /// <summary>
        /// Get next / last map event Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MapEvent</returns>
        public async System.Threading.Tasks.Task<MapEvent> FetchNextMapEventAsync (int gameId)
        {
             ApiResponse<MapEvent> localVarResponse = await FetchNextMapEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last map event Returns the next unfetched event of the  Map Event type. Map Events activeata all active components of a type at once  If the event is not of the map event type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MapEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapEvent>> FetchNextMapEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextMapEvent");

            var localVarPath = "/games/{game_id}/events/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextMapEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MapEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapEvent)));
        }

        /// <summary>
        /// Get next / last movement event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>MovementEvent</returns>
        public MovementEvent FetchNextMovementEvent (int gameId)
        {
             ApiResponse<MovementEvent> localVarResponse = FetchNextMovementEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last movement event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of MovementEvent</returns>
        public ApiResponse<MovementEvent> FetchNextMovementEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextMovementEvent");

            var localVarPath = "/games/{game_id}/events/movement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextMovementEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MovementEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MovementEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MovementEvent)));
        }

        /// <summary>
        /// Get next / last movement event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of MovementEvent</returns>
        public async System.Threading.Tasks.Task<MovementEvent> FetchNextMovementEventAsync (int gameId)
        {
             ApiResponse<MovementEvent> localVarResponse = await FetchNextMovementEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last movement event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (MovementEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MovementEvent>> FetchNextMovementEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextMovementEvent");

            var localVarPath = "/games/{game_id}/events/movement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextMovementEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MovementEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MovementEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MovementEvent)));
        }

        /// <summary>
        /// Get next / last push event Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>PushEvent</returns>
        public PushEvent FetchNextPushEvent (int gameId)
        {
             ApiResponse<PushEvent> localVarResponse = FetchNextPushEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last push event Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of PushEvent</returns>
        public ApiResponse<PushEvent> FetchNextPushEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextPushEvent");

            var localVarPath = "/games/{game_id}/events/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextPushEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PushEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PushEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PushEvent)));
        }

        /// <summary>
        /// Get next / last push event Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of PushEvent</returns>
        public async System.Threading.Tasks.Task<PushEvent> FetchNextPushEventAsync (int gameId)
        {
             ApiResponse<PushEvent> localVarResponse = await FetchNextPushEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last push event Returns the next unfetched event of the push type.  If the event is not of the push  type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (PushEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PushEvent>> FetchNextPushEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextPushEvent");

            var localVarPath = "/games/{game_id}/events/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextPushEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PushEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PushEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PushEvent)));
        }

        /// <summary>
        /// Get next / last shoot event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ShootEvent</returns>
        public ShootEvent FetchNextShootEvent (int gameId)
        {
             ApiResponse<ShootEvent> localVarResponse = FetchNextShootEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last shoot event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of ShootEvent</returns>
        public ApiResponse<ShootEvent> FetchNextShootEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextShootEvent");

            var localVarPath = "/games/{game_id}/events/shoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextShootEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShootEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShootEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShootEvent)));
        }

        /// <summary>
        /// Get next / last shoot event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ShootEvent</returns>
        public async System.Threading.Tasks.Task<ShootEvent> FetchNextShootEventAsync (int gameId)
        {
             ApiResponse<ShootEvent> localVarResponse = await FetchNextShootEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last shoot event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (ShootEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShootEvent>> FetchNextShootEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextShootEvent");

            var localVarPath = "/games/{game_id}/events/shoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextShootEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShootEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShootEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShootEvent)));
        }

        /// <summary>
        /// Get next / last shutdown event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ShutdownEvent</returns>
        public ShutdownEvent FetchNextShutdownEvent (int gameId)
        {
             ApiResponse<ShutdownEvent> localVarResponse = FetchNextShutdownEventWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get next / last shutdown event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of ShutdownEvent</returns>
        public ApiResponse<ShutdownEvent> FetchNextShutdownEventWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextShutdownEvent");

            var localVarPath = "/games/{game_id}/events/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextShutdownEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShutdownEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShutdownEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShutdownEvent)));
        }

        /// <summary>
        /// Get next / last shutdown event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ShutdownEvent</returns>
        public async System.Threading.Tasks.Task<ShutdownEvent> FetchNextShutdownEventAsync (int gameId)
        {
             ApiResponse<ShutdownEvent> localVarResponse = await FetchNextShutdownEventAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get next / last shutdown event Returns the next unfetched event of the movement type.  If the event is not of the movement type you will get a &#x60;400&#x60; status and the event stays unfetched
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Task of ApiResponse (ShutdownEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShutdownEvent>> FetchNextShutdownEventAsyncWithHttpInfo (int gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->FetchNextShutdownEvent");

            var localVarPath = "/games/{game_id}/events/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchNextShutdownEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShutdownEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShutdownEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShutdownEvent)));
        }

        /// <summary>
        /// trace event All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>List&lt;EventType&gt;</returns>
        public List<EventType> TraceEvent (int gameId, bool wait, bool? batch = default(bool?))
        {
             ApiResponse<List<EventType>> localVarResponse = TraceEventWithHttpInfo(gameId, wait, batch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// trace event All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;EventType&gt;</returns>
        public ApiResponse<List<EventType>> TraceEventWithHttpInfo (int gameId, bool wait, bool? batch = default(bool?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->TraceEvent");
            // verify the required parameter 'wait' is set
            if (wait == null)
                throw new ApiException(400, "Missing required parameter 'wait' when calling EventHandlingApi->TraceEvent");

            var localVarPath = "/games/{game_id}/events/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (batch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batch", batch)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TraceEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventType>)));
        }

        /// <summary>
        /// trace event All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>Task of List&lt;EventType&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventType>> TraceEventAsync (int gameId, bool wait, bool? batch = default(bool?))
        {
             ApiResponse<List<EventType>> localVarResponse = await TraceEventAsyncWithHttpInfo(gameId, wait, batch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// trace event All events needed by the client are accessible here. (Usefull for animations) More about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)  **This function only returns the type of the event you need to fetch the data seperately** &gt; Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events- -updates)
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="wait">If true the server will not responde until a event is added to the queue  Rrequires less traffic but might impacts the servers performance or cause timeouts at the client</param>
        /// <param name="batch">If true you will get all past events at once If false the list only contains the oldest unfetched event (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;EventType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventType>>> TraceEventAsyncWithHttpInfo (int gameId, bool wait, bool? batch = default(bool?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EventHandlingApi->TraceEvent");
            // verify the required parameter 'wait' is set
            if (wait == null)
                throw new ApiException(400, "Missing required parameter 'wait' when calling EventHandlingApi->TraceEvent");

            var localVarPath = "/games/{game_id}/events/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("game_id", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (batch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batch", batch)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TraceEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventType>)));
        }

    }
}
