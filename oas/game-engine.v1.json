{
  "openapi": "3.0.0",
  "info": {
    "title": "Robot Rally Game logic engine",
    "version": "v2.15.1",
    "description": "This api controlls the flow of a game and provides it's data.\nIt is desiged to be RESTfull so the structure works simmilar as file system.\nThe service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan",
    "contact": {
      "name": "Nils Brugger",
      "email": "nbrugger@student.tgm.ac.at"
    },
    "license": {
      "name": "Apache 2.0"
    }
  },
  "servers": [
    {
      "url": "http://game.host/v1",
      "description": "Production"
    },
    {
      "url": "http://localhost:5050/v1",
      "description": "Debug"
    }
  ],
  "paths": {
    "/games/": {
      "get": {
        "summary": "Get all games",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": true,
                  "minItems": 0,
                  "items": {
                    "$ref": "#/components/schemas/GameID"
                  }
                }
              }
            }
          }
        },
        "operationId": "getGames",
        "description": "Returns a list of all hosted games",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "joinable",
            "description": "true: only return joinable games"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "unprotected",
            "description": "true: only display games with no password set"
          }
        ]
      },
      "post": {
        "summary": "Create Game",
        "operationId": "createGame",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameID"
                }
              }
            }
          }
        },
        "description": "Creates a random game by your defined rules",
        "security": [
          {
            "admin-access": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameRules"
              }
            }
          },
          "description": "*Optional*\nThis rules define how your game will behave"
        },
        "tags": [
          "Game"
        ]
      },
      "parameters": []
    },
    "/games/{game_id}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get game status",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getGameState",
        "description": "Returns the status of a game",
        "parameters": []
      }
    },
    "/games/{game_id}/actions": {
      "get": {
        "summary": "Get games actions",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getActions",
        "security": [
          {
            "admin-access": []
          }
        ],
        "description": "Get all (**not robot related**) actions comitted to this game.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "EXECUTED",
                "ALL"
              ],
              "default": "ALL"
            },
            "in": "query",
            "name": "mode",
            "description": "Defines wich entries to return"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "put": {
        "summary": "Commit Action",
        "operationId": "commitAction",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Queues an action to be executed",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ActionType"
            },
            "in": "query",
            "name": "action",
            "required": true
          }
        ],
        "security": [
          {
            "player-auth": []
          }
        ],
        "tags": [
          "Game"
        ]
      }
    },
    "/games/{game_id}/players/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get all players",
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getAllPlayers",
        "description": "Returns the index of all players",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "post": {
        "summary": "Join game",
        "operationId": "join",
        "responses": {
          "200": {
            "description": "Joined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinResponse"
                }
              }
            }
          },
          "401": {
            "description": "Wrong/No password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          },
          "409": {
            "description": "Not Joinable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Join the given game.\nYou will get your ID by doing this, if you already in the game you can get your ID again if you lost it.<br>\nThe id is neccessary for any further API calls",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "password",
            "description": "The password of the game if the lobby is password protected"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/PlayerName"
            },
            "in": "query",
            "name": "name",
            "description": "The name to be displayed as username"
          }
        ],
        "tags": [
          "Players"
        ]
      }
    },
    "/games/{game_id}/players/{player_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/player_id"
        }
      ],
      "get": {
        "summary": "Get player",
        "tags": [
          "Players"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getPlayer",
        "description": "Get closer information about the player",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Player",
        "operationId": "kickPlayer",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Removes a player from the game. This can be done by the player itsself or by the host.",
        "security": [
          {
            "player-auth": []
          },
          {
            "admin-access": []
          }
        ],
        "tags": [
          "Players"
        ]
      },
      "patch": {
        "summary": "Set Robots",
        "operationId": "chooseRobot",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "# DEPRECATET\n> This feature is useless in this version. It will be usefull in newer versions\n\nSets the type of robot(s) the player is controlling",
        "security": [
          {
            "player-auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Robots"
                }
              }
            }
          },
          "description": "The robots assigned to the player"
        },
        "tags": [
          "Players"
        ]
      }
    },
    "/games/{game_id}/upgrades/shop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get upgrade shop",
        "tags": [
          "Upgrades"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeShop"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getUpgradeShop",
        "description": "Retuns a list of all cards in the upgrade shop",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/upgrades/{upgrade_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/upgrade_id"
        }
      ],
      "get": {
        "summary": "Get upgrade information",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upgrade"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getUpgradeInformation",
        "security": [
          {
            "player-auth": []
          }
        ],
        "description": "Get detailed information about the Upgrade",
        "tags": [
          "Upgrades"
        ]
      }
    },
    "/games/{game_id}/upgrades/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "get all Upgrades",
        "tags": [
          "Upgrades"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpgradeID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getAllUpgradeIDs",
        "description": "Returns a list of all Upgrade IDs",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/registers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        }
      ],
      "get": {
        "summary": "Get register information",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getRegisters",
        "description": "Returns the content of the registers",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "delete": {
        "summary": "clear registers",
        "operationId": "clearRegisters",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "tags": [
          "Robots"
        ],
        "description": "Emptys all register of the robot",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/upgrades": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        }
      ],
      "get": {
        "summary": "Get Robot Upgrades",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpgradeID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getInstalledUpgrades",
        "description": "Returns the upgrades installed on the robot",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "delete": {
        "summary": "Clear Robot Upgrades",
        "operationId": "clearUpgrades",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Removes all upgrades from a robot",
        "security": [
          {
            "player-auth": []
          }
        ],
        "tags": [
          "Robots"
        ]
      },
      "patch": {
        "summary": "Remove Upgrade",
        "operationId": "removeRobotUpgrade",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Removes a paticular upgrade from the robot",
        "security": [
          {
            "player-auth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "upgrade",
            "description": "The id of the upgrade to remove"
          }
        ],
        "tags": [
          "Robots"
        ]
      }
    },
    "/games/{game_id}/map/tiles/{x}/{y}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "schema": {
            "type": "integer",
            "minimum": 0
          },
          "name": "x",
          "in": "path",
          "required": true,
          "description": "The x codinate of the tile"
        },
        {
          "schema": {
            "type": "integer",
            "minimum": 0
          },
          "name": "y",
          "in": "path",
          "required": true,
          "description": "The y codinate of the tile"
        }
      ],
      "get": {
        "summary": "Get tile",
        "tags": [
          "Map"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getTile",
        "description": "Inspect a tile of the map",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/map/info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get Map info",
        "tags": [
          "Map"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getMapInfo",
        "description": "Get meta information abouzt the map of the game",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/map": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get Map",
        "tags": [
          "Map"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getGameMap",
        "description": "Returns the map of this specific game including the tiles (data)",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get all robots",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getRobots",
        "description": "Returns a list of all robot IDs in this game.\n> A robot is not a player as a player is able to controll multiple robots",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/actions/avinable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        }
      ],
      "get": {
        "summary": "Get Aviable actions",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityEventOportunity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getPossibleActions",
        "description": "Returns a list of EntityActionTypes which are possible to be executed at the moment.",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/actions/stack/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        }
      ],
      "post": {
        "summary": "Add Entity Action to stack",
        "operationId": "doEntityAction",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Adds an action to the stack. The stack is processed using *first in first out*",
        "security": [
          {
            "player-auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityAction"
              }
            }
          }
        },
        "tags": [
          "Robots"
        ]
      },
      "get": {
        "summary": "Get Robot action stack",
        "operationId": "getActionStack",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityAction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Retuns a list od all actions in the stack",
        "security": [
          {
            "player-auth": []
          }
        ],
        "tags": [
          "Robots"
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        }
      ],
      "get": {
        "summary": "Get Robot Informations",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getRobotStats",
        "description": "Returns the status and info about the robot",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/events/type": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "trace event",
        "operationId": "traceEvent",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "All events needed by the client are accessible here. (Usefull for animations)\nMore about this function is found in the [regarding Github Issue](https://github.com/FactoryRally/game-controller/issues/6)\n\n**This function only returns the type of the event you need to fetch the data seperately**\n> Read more at [api-usage.md](https://github.com/FactoryRally/game-controller/blob/master/documentation/rest/api-usage.md#events--updates)",
        "security": [
          {
            "player-auth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "batch",
            "description": "If true you will get all past events at once\nIf false the list only contains the oldest unfetched event"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "wait",
            "description": "If true the server will not responde until a event is added to the queue\n\nRrequires less traffic but might impacts the servers performance or cause timeouts at the client",
            "required": true
          }
        ],
        "tags": [
          "EventHandling"
        ]
      }
    },
    "/maps/": {
      "get": {
        "summary": "Get Map Names",
        "tags": [
          "Map Repo"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Name"
                  }
                }
              }
            }
          }
        },
        "operationId": "getMaps",
        "description": "Returns a list of all map names",
        "security": [
          {
            "admin-access": []
          }
        ]
      },
      "post": {
        "summary": "Save Map",
        "operationId": "saveMap",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Saves a map to the repository",
        "security": [
          {
            "admin-access": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            }
          },
          "description": "The map to save"
        },
        "tags": [
          "Map Repo"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "The name of the map",
            "required": true
          }
        ]
      }
    },
    "/maps/{map_name}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "map_name",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get map",
        "tags": [
          "Map Repo"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "operationId": "getMap",
        "description": "Get a map by its name",
        "security": [
          {
            "admin-access": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Map",
        "operationId": "deleteMap",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                }
              }
            }
          }
        },
        "description": "Delete a map by its name",
        "security": [
          {
            "admin-access": []
          }
        ],
        "tags": [
          "Map Repo"
        ]
      }
    },
    "/games/{game_id}/events/head": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get next event",
        "tags": [
          "EventHandling"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEvent"
                }
              }
            }
          },
          "404": {
            "description": "No unfetched event"
          }
        },
        "operationId": "fetchNextEvent",
        "description": "Returns the next unfetched event of the ***any*** type.",
        "security": [
          {
            "player-auth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "wait",
            "description": "If this is true the server will not responde until there is an event. This prevents fast fetching/active waiting. The server will leave the connection open. > Keep in mind that the connection might times out of no event occurs within the timeout time-frame"
          }
        ]
      }
    },
    "/games/{game_id}/consumers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "post": {
        "summary": "Register Consumers",
        "operationId": "registerConsumer",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinResponse"
                }
              }
            }
          },
          "410": {
            "description": "Consumer count limit reached"
          }
        },
        "description": "Add a consumer to create a *virtual* (*spectating*) player to consume events",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumerRegistration"
              },
              "examples": {
                "example": {
                  "value": {
                    "name": "Gameboard",
                    "description": "Gameboard, to mirror the game in the real world with real robots. Just consumes /game/game_id/events/head"
                  }
                }
              }
            }
          },
          "description": "Information about the joining consumer"
        },
        "tags": [
          "Consumer"
        ]
      }
    },
    "/games/{game_id}/statements": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        }
      ],
      "get": {
        "summary": "Get Programming cards",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "uniqueItems": false,
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              }
            }
          }
        },
        "operationId": "getProgrammingCards",
        "description": "Returns the Programming cards in this game",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "head": {
        "description": "Get the ids of all programming cards avainable in this game",
        "summary": "Get Programming Card IDs",
        "operationId": "getProgrammingCardIds",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpgradeID"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "player-auth": []
          }
        ],
        "tags": [
          "Game"
        ]
      }
    },
    "/games/{game_id}/statements/{statement_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "schema": {
            "$ref": "#/components/schemas/UpgradeID"
          },
          "name": "statement_id",
          "in": "path",
          "required": true,
          "description": "The id of the programming card"
        }
      ],
      "get": {
        "summary": "Get Programming Card",
        "tags": [
          "Game"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotCommand"
                }
              }
            }
          }
        },
        "operationId": "getProgrammingCard",
        "description": "Get the programming card by id",
        "security": [
          {
            "player-auth": []
          }
        ]
      }
    },
    "/games/{game_id}/entities/robots/{robot_id}/registers/{register}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/robot_id"
        },
        {
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4,
            "format": "int32"
          },
          "name": "register",
          "in": "path",
          "required": true,
          "description": "The number of the register"
        }
      ],
      "get": {
        "summary": "Get Register Content",
        "tags": [
          "Robots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotCommand"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "getRegisterContent",
        "description": "Returns the Programming card in the robots register",
        "security": [
          {
            "player-auth": []
          }
        ]
      },
      "put": {
        "summary": "Set Register Content",
        "operationId": "setRegister",
        "responses": {
          "201": {
            "description": "Changed"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Changes the programming card of the robots register",
        "security": [
          {
            "player-auth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "statement_id",
            "required": true,
            "description": "The Id of the statement to place here"
          }
        ],
        "tags": [
          "Robots"
        ]
      }
    },
    "/games/{game_id}/upgrades/shop/{upgrade_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/game_id"
        },
        {
          "$ref": "#/components/parameters/upgrade_id"
        }
      ],
      "patch": {
        "summary": "Buy Upgrade",
        "operationId": "buyUpgrade",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "description": "Buy or exchange an upgrade",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/UpgradeID"
            },
            "in": "query",
            "name": "exchange",
            "description": "The id of the upgrade to exchange with. Set to null or leave empty for a regular purchase"
          }
        ],
        "tags": [
          "Upgrades"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "admin-access": {
        "type": "apiKey",
        "in": "query",
        "name": "skey",
        "description": "This is a static key needed for administrative operations like creating games and can only be obtained inside the servers runtime.\n\n``"
      },
      "player-auth": {
        "in": "query",
        "description": "Players need a token to join a lobby/game. If the host sets a password the player needs the password to get the token",
        "name": "pat",
        "type": "apiKey"
      }
    },
    "schemas": {
      "Tile": {
        "type": "object",
        "title": "Tile",
        "description": "A tile is a square at the Game field<br>\n**Note:** \n* `direction` is only aviable for belts\n* properties with a `rotator-` prefix are only aviable for rotator (parts)",
        "additionalProperties": false,
        "x-tags": [
          "Map"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TileType"
          },
          "empty": {
            "type": "boolean",
            "description": "If there is no entity at the tile this is true"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "rotator-direction": {
            "$ref": "#/components/schemas/Rotation"
          },
          "level": {
            "type": "integer",
            "default": 1,
            "description": "The height of the tile. 1 = default",
            "format": "int32",
            "minimum": 1,
            "maximum": 3
          },
          "order": {
            "type": "integer",
            "description": "Descibes the interal order of the tile type: eg. if order is 3 it is the 4th of its tile-type (because it is 0 based)\n\nDefault -1 means the oder has no use to this tile(type)",
            "default": -1
          }
        },
        "required": [
          "type",
          "level"
        ]
      },
      "TileType": {
        "type": "string",
        "title": "TileType",
        "description": "The type defines the function of a tile and how it is displayed. The behaviour is unknown to the client",
        "enum": [
          "normal",
          "rotator",
          "wall",
          "prio_core",
          "conveyor",
          "trap-door",
          "stomper",
          "radioactive",
          "repair site",
          "Button",
          "One Way Wall",
          "Puddle",
          "pit",
          "Ramp",
          "spawn",
          "checkpoint"
        ],
        "x-tags": [
          "Map"
        ]
      },
      "Direction": {
        "type": "string",
        "title": "Direction",
        "default": "up",
        "description": "Defines a direction in a 2D system. the X and Y values can be defined by the client.",
        "enum": [
          "up",
          "down",
          "left",
          "right"
        ]
      },
      "RotatorPosition": {
        "type": "string",
        "title": "RotatorPosition",
        "description": "The rotator blocks consist of 4 blocks. This 4 blocks can be differenciated by this property",
        "enum": [
          "up_left",
          "up_right",
          "down_left",
          "down_right"
        ]
      },
      "Rotation": {
        "type": "string",
        "title": "Rotation",
        "default": "left",
        "description": "Defines wether to turn left or right",
        "enum": [
          "left",
          "right"
        ]
      },
      "Entity": {
        "type": "object",
        "title": "Entity",
        "description": "Describes a actor at the game board. Not to be confused with `Player` which is the person controlling the Entity.\n<br>\nthis will *most likely* be a player controlled robot but it also can be a AI controlled Entity or robot\n> We did use Entity instead of the word Robot or bot because the word *bot* is used for the AIs controlling the robot. And also because theoretial a entity can be a not robot entity",
        "additionalProperties": false,
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only"
          },
          "location": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "required": [
          "direction",
          "name",
          "location"
        ]
      },
      "GameRules": {
        "title": "GameRules",
        "type": "object",
        "description": "Game Rules define the rules for a Game",
        "properties": {
          "player-names-visible": {
            "type": "boolean",
            "default": true,
            "description": "If true players can see the name of the player controlling a robot"
          },
          "max-players": {
            "type": "integer",
            "default": 4,
            "minimum": 1,
            "maximum": 10,
            "description": "The maximum ammount of players able to join the game"
          },
          "name": {
            "type": "string",
            "description": "The visible name of the game",
            "minLength": 3,
            "maxLength": 50
          },
          "robots-per-player": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 3,
            "description": "Defines the number of robots per player"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "fill-with-bots": {
            "type": "boolean",
            "default": false,
            "description": "If true emply player slots are going to be filled up with AI enemys"
          },
          "animation-delay": {
            "type": "integer",
            "default": 1500,
            "description": "Sets GameInfo.animation-delay",
            "minimum": 0,
            "maximum": 10000
          }
        },
        "required": [
          "name"
        ]
      },
      "Game": {
        "title": "Game",
        "type": "object",
        "description": "A Game is like a lobby, people can join/leave.<br>\nA Game is created by a host who does *not* needs to attend the game as a player but in the most cases he will.\nThis is *read-only*",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/GameID"
          },
          "name": {
            "type": "string",
            "example": "Nitons Game 1",
            "minLength": 3,
            "maxLength": 20,
            "pattern": "[A-Za-z]+[A-Za-z0-9 _-]+",
            "description": "The name is **unique** but it should ***not*** be used as identifer (it's not natively supportet)\nIt is used to display the game's name"
          },
          "players": {
            "type": "array",
            "minItems": 0,
            "description": "The list of players attending the game.\n(Only contains the name of the players)",
            "items": {
              "$ref": "#/components/schemas/PlayerID"
            }
          },
          "runtime_info": {
            "$ref": "#/components/schemas/GameState"
          }
        },
        "required": [
          "name"
        ]
      },
      "GameID": {
        "type": "integer",
        "title": "GameID",
        "description": "**Unique**<br>\nThis is the parameter a game is identified by",
        "format": "int32",
        "example": 537,
        "minimum": 0,
        "maximum": 2048
      },
      "Name": {
        "type": "string",
        "title": "Name",
        "description": "The default rule for names in the game",
        "example": "Niton 1",
        "minLength": 3,
        "maxLength": 13,
        "pattern": "[A-Za-z]+[A-Za-z0-9_ -]+[A-Za-z0-9]{1}"
      },
      "GameInfo": {
        "title": "Game Info",
        "type": "object",
        "description": "Describes the current state of the game. It does not includes the gamedata (like players/poitions/field) but general information.\n\nThis is read only",
        "properties": {
          "passed-time": {
            "type": "integer",
            "default": -1,
            "description": "The time passed since the game started in secconds. If the game is not started it will be `0`",
            "format": "int32",
            "example": 240,
            "minimum": -1
          },
          "state": {
            "$ref": "#/components/schemas/GameState"
          },
          "hardware-compatible": {
            "type": "boolean",
            "default": false,
            "description": "Not every game can be connected to hardware (for example to many bots)\n\nIf this is true it means you can use this game with hardware"
          },
          "player-on-turn": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "max-players": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "The maximum count of players that can participate in this game"
          },
          "current-players": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "description": "The numbers of players in the game"
          },
          "executionInfo": {
            "type": "object",
            "description": "Information abou the executon cycle",
            "required": [
              "currentRegister",
              "currentRobot"
            ],
            "properties": {
              "currentRegister": {
                "type": "integer",
                "description": "The index of the register currently executed"
              },
              "currentRobot": {
                "type": "integer",
                "description": "The index of the robot currently executing"
              }
            }
          },
          "password-protected": {
            "type": "boolean",
            "description": "True if the game has a password in order to join\n"
          },
          "animation-delay": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000,
            "description": "The delay in `ms` that will be used to give clients the oportulity to play animations after executed commands and other animatable events",
            "multipleOf": 100,
            "default": 1500
          }
        },
        "required": [
          "passed-time",
          "state",
          "hardware-compatible",
          "player-on-turn",
          "name",
          "max-players",
          "current-players",
          "executionInfo",
          "password-protected",
          "animation-delay"
        ]
      },
      "GameState": {
        "type": "string",
        "title": "GameStatus",
        "description": "The phase the game is currently in\n* `Lobby`: Players are able to join, Bots able to be added. Host can decide to start the game and leave the phase\n* `Planning`: **[BETA - Not in game]** Players can choose their type of robot/bots bots autopick\n* `Playing`: The game is running and the players can do interactions\n* `Break`: The game is paused by the host. Players can still do interactions but they wont be executed as long as the break lasts\n* `Finished` : The game is over and there is a winner. This is the time to save the game for a replay\n",
        "enum": [
          "LOBBY",
          "PLANNING",
          "PLAYING",
          "FINISHED",
          "BREAK"
        ]
      },
      "Password": {
        "type": "string",
        "title": "Password",
        "description": "The password of a game",
        "format": "password",
        "example": "QWer7zÜ",
        "minLength": 4,
        "maxLength": 18
      },
      "Error-Message": {
        "title": "ErrorMessage",
        "type": "object",
        "description": "A message about that went wrong. Usefull to display users a short and usefull prompt",
        "properties": {
          "message": {
            "type": "string",
            "description": "A short message describing what happened in human words"
          },
          "error": {
            "type": "string",
            "description": "The error/exception"
          }
        },
        "required": [
          "message"
        ]
      },
      "Action": {
        "title": "Action",
        "type": "object",
        "description": "A queued action.\nActions are executed in their adding sequence which is represented by their index",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The queue index of the action"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "executed": {
            "type": "boolean",
            "description": "true if the action was allready executed"
          },
          "requestor": {
            "type": "integer",
            "description": "The index of the player this instruction came from"
          }
        }
      },
      "RoundPhase": {
        "type": "string",
        "title": "RoundPhase",
        "description": "A round consits of 3 Phases each phase does different things\n* `Upgrade` : Purchase Upgrades with energy cubes\n* `Programming` : Programm your robot(s)\n* `Activation` : The robots execute their code",
        "enum": [
          "upgrade",
          "programming",
          "activation"
        ]
      },
      "UpgradeShop": {
        "type": "object",
        "description": "A shop to buy upgrades from. Each element is buyable once and then vanishes from the list",
        "properties": {
          "upgrades": {
            "type": "array",
            "minItems": 3,
            "maxItems": 10,
            "title": "UpgradeShop",
            "items": {
              "$ref": "#/components/schemas/UpgradeID"
            }
          },
          "information": {
            "$ref": "#/components/schemas/UpgradeShopInformation"
          }
        }
      },
      "Upgrade": {
        "type": "object",
        "title": "Upgrade",
        "description": "A upgrade is a module making a robot stronger",
        "additionalProperties": false,
        "minProperties": 4,
        "properties": {
          "cost": {
            "type": "integer",
            "default": 2,
            "description": "The energy cost to buy this upgrade",
            "minimum": 0,
            "maximum": 5
          },
          "name": {
            "type": "string",
            "description": "The ame to display for this Upgrade. ***Not*** unique (identifying)",
            "example": "Penetration Lazer Mk.2",
            "minLength": 2,
            "maxLength": 27
          },
          "permanent": {
            "type": "boolean",
            "default": true,
            "description": "if true the card belongs to the player for the rest of the game"
          },
          "description": {
            "type": "string",
            "default": null,
            "description": "A description about the effect of the card.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength": 300
          },
          "rounds": {
            "type": "integer",
            "description": "If the Upgrade is not permanent this variable defines the number of rounds this Upgrade works",
            "minimum": 1,
            "maximum": 10
          },
          "values": {
            "type": "array",
            "description": "Defines number values for the upgrade.<br>Example:\nEffect: \"You have {registers} additonal Registers\"<br> `{registers}` is the number of the regsiters (that will be added) and the exact value will be defined in here (`values`)",
            "uniqueItems": true,
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "type": {
            "$ref": "#/components/schemas/UpgradeType"
          },
          "id": {
            "$ref": "#/components/schemas/UpgradeID"
          }
        },
        "required": [
          "cost",
          "name",
          "type"
        ]
      },
      "RobotCommand": {
        "title": "RobotCommand",
        "type": "object",
        "description": "A command for a robot to execute",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Instruction"
          },
          "parameters": {
            "type": "array",
            "description": "Defines parameters for the instruction.<br>Example:\nEffect: \"Move {steps} steps forward\"<br> `{steps}` is the number of steps the robot will do. And the exact value (of steps) will be defined in here (`values`)",
            "uniqueItems": true,
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          },
          "description": {
            "type": "string",
            "default": null,
            "description": "A description about the effect of the command.\nVariables are using the format `{name}` where *name* refers to the names in `values`. ",
            "maxLength": 300
          },
          "name": {
            "type": "string",
            "description": "The ame to display for this Command. ***Not*** unique (identifying)",
            "example": "Penetration Lazer Mk.2",
            "minLength": 2,
            "maxLength": 27
          },
          "times": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10,
            "description": "Describes how often this command is going to be executed"
          }
        },
        "required": [
          "type"
        ]
      },
      "Pair": {
        "type": "object",
        "title": "Pair",
        "additionalProperties": false,
        "minProperties": 1,
        "maxProperties": 2,
        "description": "A named value. A pair of an index and value. (Part of a map)",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name the value is bound to"
          },
          "value": {
            "description": "The value behind the name. Can be null",
            "type": "integer"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpgradeType": {
        "type": "string",
        "title": "UpgradeType",
        "description": "Defines the type (the code/actions) this card will have\n* `generator` : Generates *x* energy every round",
        "enum": [
          "generator"
        ],
        "maxLength": 300
      },
      "Instruction": {
        "type": "string",
        "title": "Instruction",
        "description": "Defines what a command will do",
        "enum": [
          "move",
          "rotate",
          "shoot",
          "repeat",
          "energy"
        ]
      },
      "Player": {
        "type": "object",
        "title": "Player",
        "description": "A player attending in a game.\n#### Warning\nThis is **not** permanent. It is created and removed with the game (or with you joining and leaving the game)",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "controlled_entities": {
            "type": "array",
            "description": "The list of entities controlled by this player",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/EntityID"
            }
          },
          "on-turn": {
            "type": "boolean",
            "default": false,
            "description": "Îf this is true rhe player is able to interact at the moment"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "Defines if the player is actively playing. If this is false the player does random moves. This is only false if the player disconnects"
          },
          "display_name": {
            "$ref": "#/components/schemas/PlayerName"
          }
        },
        "required": [
          "id",
          "controlled_entities",
          "display_name"
        ]
      },
      "PlayerID": {
        "type": "integer",
        "title": "PlayerID",
        "description": "This id uniquely identifys the player (in a game).\n\n **Not** to be confused with the `uid` which is used for authentication",
        "example": 3,
        "minimum": 0,
        "maximum": 8
      },
      "EntityID": {
        "type": "integer",
        "title": "EntityID",
        "description": "The unique identification of this entity. <br>\n*!!!* This is not the id of the player<br>\nThis value will be autogenerated by the api and is read only",
        "format": "int32",
        "minimum": 0
      },
      "Replay": {
        "type": "object",
        "title": "Replay",
        "description": "## BETA (Adressed in V0.1.2)\nA replay consists of all data needed to replay a game. Means starting conditions and every change that was made",
        "deprecated": true
      },
      "ActionType": {
        "type": "string",
        "title": "ActionType",
        "description": "Defines what an action will do",
        "enum": [
          "PAUSE",
          "UNPAUSE",
          "START_GAME"
        ]
      },
      "JoinResponse": {
        "title": "JoinResponse",
        "type": "object",
        "description": "All the data you need as you joined a game.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "pat": {
            "type": "string",
            "description": "The uid is the key for the joined player. You need this key for authentication"
          }
        },
        "required": [
          "id",
          "pat"
        ]
      },
      "UpgradeID": {
        "type": "integer",
        "title": "UpgradeID",
        "minimum": 0,
        "maximum": 10000,
        "description": "The id of an upgrade. **Unique**"
      },
      "UpgradeShopInformation": {
        "title": "UpgradeShopInformation",
        "type": "object",
        "properties": {
          "open": {
            "type": "boolean",
            "default": true,
            "description": "if true you can buy uprades"
          }
        }
      },
      "EventType": {
        "type": "string",
        "title": "EventType",
        "description": "Describes what the event is about",
        "enum": [
          "movement",
          "upgrade purchase",
          "activate upgrade",
          "lazer shot",
          "game start",
          "clear shop",
          "fill shop",
          "programming timer start",
          "programming timer stop",
          "random card distribution",
          "take card event",
          "activate checkpoint",
          "game_phase_changed",
          "game_round_phase_changed",
          "pause",
          "unpause",
          "damage",
          "lazer hit",
          "push",
          "join",
          "lock in",
          "robot_start_executing",
          "heal",
          "energy gain",
          "map",
          "shutdown",
          "change register",
          "game end event",
          "clear register",
          "time elapsed",
          "map created",
          "upgrades discarded"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "MovementEvent": {
        "title": "MovementEvent",
        "type": "object",
        "description": "Describes the movement of a entity",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "movement-ammount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 50,
            "description": "How far (in tiles) the movement was executed"
          },
          "rotation": {
            "$ref": "#/components/schemas/Rotation"
          },
          "rotation-times": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "The number of times (90°) the robot turns"
          },
          "from": {
            "$ref": "#/components/schemas/Position"
          },
          "to": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "Position": {
        "title": "Position",
        "type": "object",
        "description": "Describes a point in a 2D system, without decimals",
        "properties": {
          "x": {
            "type": "integer",
            "description": "The X cordinate",
            "multipleOf": 1
          },
          "y": {
            "type": "integer",
            "description": "Position on the Y axis (top-down on screen)",
            "multipleOf": 1
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "MapInfo": {
        "title": "MapInfo",
        "type": "object",
        "description": "Describes the map *without* the tiles",
        "x-tags": [
          "Map"
        ],
        "properties": {
          "prioBeacon": {
            "$ref": "#/components/schemas/Position"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "PushEvent": {
        "title": "PushEvent",
        "type": "object",
        "description": "When entities push each other",
        "properties": {
          "pusher-id": {
            "$ref": "#/components/schemas/EntityID"
          },
          "ammount": {
            "type": "integer",
            "minimum": 1,
            "description": "The number of tiles the pushed entity is pushed"
          },
          "push-directon": {
            "$ref": "#/components/schemas/Direction"
          },
          "pushed-id": {
            "$ref": "#/components/schemas/EntityID"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "ShootEvent": {
        "title": "ShootEvent",
        "type": "object",
        "description": "Event if a player shoots a lazer",
        "properties": {
          "shooter": {
            "$ref": "#/components/schemas/EntityID"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "to": {
            "$ref": "#/components/schemas/Position"
          },
          "hit-entitys": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 0,
            "description": "The entitys hit by the ray",
            "items": {
              "$ref": "#/components/schemas/EntityID"
            }
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "DamageEvent": {
        "title": "DamageEvent",
        "type": "object",
        "description": "Happens when a entity takes damage",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          },
          "ammount": {
            "type": "integer",
            "description": "The number of damage points",
            "minimum": 0,
            "maximum": 5
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "MapEventType": {
        "type": "string",
        "title": "MapEventType",
        "description": "The event that occurs if the active map elements are activated",
        "enum": [
          "lazer",
          "rotator",
          "conveyor-belts",
          "stomper",
          "hole",
          "hole-trap",
          "pusher",
          "flamethrower",
          "portal",
          "toggle-ramps",
          "repair"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "MapEvent": {
        "title": "MapEvent",
        "type": "object",
        "description": "Events that takes place with the active components of the map",
        "x-tags": [
          "EventHandling"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MapEventType"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          }
        }
      },
      "LazerHitEvent": {
        "title": "LazerHitEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "Called when a player is hit by an "
      },
      "ShutdownEvent": {
        "title": "ShutdownEvent",
        "description": "When a robot reboots",
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityID"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "EntityAction": {
        "title": "EntityAction",
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/EntityActionPhase"
          },
          "type": {
            "$ref": "#/components/schemas/EntityActionType"
          }
        },
        "description": "The base type for entity actions between registers"
      },
      "EntityActionType": {
        "type": "string",
        "title": "EntityActionType",
        "default": "none",
        "description": "Defines the action itsselft (what the action is doing)\n\n`pass` means that nothing is done and the action wont happen\n\nIf a type starts with `edit` then all actions within the domain of the second word (eg. remove, add, change) are adressed",
        "enum": [
          "reboot",
          "use upgrade",
          "spider_jump",
          "Cache",
          "register-refresh",
          "storage-swap",
          "jumper",
          "teleporter",
          "magnet-ray",
          "pushray",
          "rotation",
          "sidekick",
          "pass",
          "buy upgrade",
          "edit register"
        ]
      },
      "EntityActionPhase": {
        "type": "string",
        "title": "EntityActionPhase",
        "enum": [
          "pre_register",
          "after_register"
        ],
        "description": "The moment at which a entity action can be performed"
      },
      "EntityEventOportunity": {
        "title": "EntityEventOportunity",
        "type": "object",
        "description": "The oportunity to perfom an action / event",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EntityActionType"
          },
          "time-left": {
            "type": "integer",
            "description": "The time in ms left to do this action",
            "format": "int64",
            "minimum": 1
          },
          "end-time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "The in most languages avinable system time in MS as of which the action cant be committed any more"
          }
        }
      },
      "SimpleUpgradeActivation": {
        "title": "SimpleUpgradeActivation",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAction"
          },
          {
            "type": "object",
            "properties": {
              "upgrade": {
                "$ref": "#/components/schemas/UpgradeID"
              }
            }
          }
        ],
        "description": "type is allways `use-upgrade`"
      },
      "EntityUseUpgradeAction": {
        "title": "EntityUseUpgradeAction",
        "description": "The action to make an entity use an upgade card (including the actions which require additional information)",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAction"
          },
          {
            "type": "object",
            "properties": {
              "upgrade": {
                "$ref": "#/components/schemas/UpgradeID"
              }
            }
          }
        ]
      },
      "Robots": {
        "type": "string",
        "title": "Robots",
        "enum": [
          "tank",
          "drone",
          "bulldozer",
          "turtle",
          "wallE",
          "robot",
          "mech"
        ],
        "description": "the type of a robot"
      },
      "RobotInfo": {
        "title": "RobotInfo",
        "description": "Describes the state/stats of a robot",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "properties": {
              "energy-cubes": {
                "type": "integer",
                "default": 3,
                "description": "The number of avainable energy cubes",
                "minimum": 0,
                "maximum": 20
              },
              "health": {
                "type": "integer",
                "default": 10,
                "description": "The remaining health points",
                "minimum": 1,
                "maximum": 10
              },
              "active": {
                "type": "boolean",
                "default": true,
                "description": "True if the robot is not in rebooting mode"
              },
              "virtual": {
                "type": "boolean",
                "default": false,
                "description": "If the robot is in virtual mode"
              },
              "priority": {
                "type": "integer",
                "minimum": 1,
                "maximum": 8,
                "description": "The priority of this player. Higher is more priority. 1 = lowest. max = number of players"
              },
              "on-turn": {
                "type": "boolean",
                "description": "True if the robot is currently active (executing a register)"
              },
              "is-mine": {
                "type": "boolean",
                "description": "True if you are the one controlling the robot"
              },
              "hand-cards": {
                "type": "integer",
                "minimum": 0,
                "maximum": 9,
                "description": "The cards in the hand of the robot"
              },
              "attitude": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 4,
                "description": "The height level of the robot"
              },
              "type": {
                "$ref": "#/components/schemas/Robots"
              }
            }
          }
        ]
      },
      "Checkpoint": {
        "title": "Checkpoint",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "minimum": 0,
                "description": "The number of the checkpoint defining the order they need to be called in"
              },
              "checked-by": {
                "type": "array",
                "description": "The entities (robots) which allready were at this point",
                "items": {
                  "$ref": "#/components/schemas/EntityID"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "description": "Checkpoints are entities"
      },
      "PlayerAccessToken": {
        "title": "PlayerAccessToken",
        "description": "The token used to authorize a player",
        "pattern": "[A-Za-z0-9+*~-_=?]+",
        "maxLength": 75,
        "minLength": 10,
        "type": "string"
      },
      "RobotPickEvent": {
        "title": "RobotPickEvent",
        "type": "object",
        "description": "Triggered when a robot is assigned to a player",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "robot": {
            "$ref": "#/components/schemas/EntityID"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "Map": {
        "title": "Map",
        "type": "object",
        "description": "The map including the tiles",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/MapInfo"
          },
          "rows": {
            "type": "array",
            "description": "a flattend array representing the tiles of the map \n\nto project it onto a 2D plane use `[x, y] => [y*width+x]`",
            "items": {
              "$ref": "#/components/schemas/Tile"
            }
          },
          "height": {
            "type": "integer",
            "minimum": 4,
            "maximum": 500,
            "description": "The height (rows) of the map"
          },
          "width": {
            "type": "integer",
            "minimum": 4,
            "maximum": 500,
            "description": "The width (columns) of the map"
          }
        },
        "required": [
          "rows",
          "height",
          "width"
        ]
      },
      "GamePhaseChangedEvent": {
        "title": "GamePhaseChangedEvent",
        "type": "object",
        "description": "When the next game phase started",
        "x-tags": [
          "EventHandling"
        ],
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/RoundPhase"
          },
          "step": {
            "$ref": "#/components/schemas/GamePhaseStep"
          },
          "information": {
            "type": "object",
            "description": "Unspecified information about the game phase (you can also obtain this information in a typesave way using the GameAPI)"
          }
        },
        "required": [
          "step"
        ]
      },
      "GenericEvent": {
        "title": "GenericEvent",
        "type": "object",
        "description": "Used to store any event and generalize them into a single type",
        "x-tags": [
          "EventHandling"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "data": {
            "type": "object",
            "description": "This is the data for the Event. In the case of type beeing `lazer hit`, data will be of the type `LazerHitEvent`. So the object-type allways matches to the `type` field "
          }
        },
        "required": [
          "type"
        ]
      },
      "PauseEvent": {
        "title": "PauseEvent",
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "UNPAUSE",
              "PAUSE"
            ]
          }
        },
        "description": "Describes the event when the game is paused or unpaused",
        "x-tags": [
          "EventHandling"
        ]
      },
      "ActionEvent": {
        "title": "ActionEvent",
        "type": "object",
        "description": "Describes an event from an action without additionaly information",
        "x-tags": [
          "EventHandling"
        ]
      },
      "JoinEvent": {
        "title": "JoinEvent",
        "type": "object",
        "description": "If somebody joins a game",
        "properties": {
          "joined_id": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "unjoin": {
            "type": "boolean",
            "description": "True if the player left instead of joining"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "PlayerName": {
        "type": "string",
        "title": "PlayerName",
        "minLength": 3,
        "maxLength": 30,
        "pattern": "[A-Za-z0-9_-]+",
        "description": "The display name of a player including rules"
      },
      "RobotStartExecEvent": {
        "title": "RobotStartExecEvent",
        "type": "object",
        "description": "When a robot is about to execute a programming card/statement",
        "x-tags": [
          "EventHandling"
        ],
        "properties": {
          "robot": {
            "$ref": "#/components/schemas/EntityID"
          },
          "card": {
            "$ref": "#/components/schemas/RobotCommand"
          },
          "register": {
            "type": "integer",
            "minimum": 0,
            "maximum": 8,
            "example": 3,
            "description": "The index of the executed register"
          }
        }
      },
      "HealEvent": {
        "title": "HealEvent",
        "type": "object",
        "description": "When a robot is healed",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "heal_amount": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 100,
            "multipleOf": 1
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "EnergyGainEvent": {
        "title": "EnergyGainEvent",
        "type": "object",
        "description": "When a robot gains energy",
        "properties": {
          "robot": {
            "$ref": "#/components/schemas/EntityID"
          },
          "ammount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "exclusiveMinimum": true,
            "description": "The ammount of energy gained"
          }
        },
        "required": [
          "robot",
          "ammount"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "ConsumerRegistration": {
        "title": "ConsumerRegistration",
        "type": "object",
        "description": "Data to describe a consumer",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "description": {
            "type": "string",
            "description": "A description what the consumer is used for (and or is)",
            "example": "Gameboard, to mirror the game in the real world with real robots. Just consumes /game/game_id/events/head",
            "maxLength": 10000,
            "minLength": 5
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "RoundPhaseChangedEvent": {
        "title": "RoundPhaseChangedEvent",
        "type": "object",
        "description": "Occurs when the next phase of the round starts",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/RoundPhase"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "PurchaseEvent": {
        "title": "PurchaseEvent",
        "type": "object",
        "description": "The event that occurs if a player buys an upgrade",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "upgrade": {
            "$ref": "#/components/schemas/UpgradeID"
          }
        },
        "x-tags": [
          "EventHandling"
        ]
      },
      "DrawCardEvent": {
        "title": "DrawCardEvent",
        "type": "object",
        "description": "The event that occurs if a player gets his programming cards",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/PlayerID"
          },
          "count": {
            "type": "integer",
            "description": "The number of cards drawn",
            "example": 8,
            "minimum": 0,
            "maximum": 9
          },
          "cards": {
            "type": "array",
            "description": "The drawn cards. **This is only visible for the player himself**",
            "items": {
              "$ref": "#/components/schemas/UpgradeID"
            }
          }
        },
        "required": [
          "player",
          "count"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "ChangeRegisterEvent": {
        "title": "ChangeRegisterEvent",
        "type": "object",
        "description": "The event when a player places or removes an robot command from/to a register",
        "x-tags": [
          "EventHandling"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "fill",
              "clear",
              "replace"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/UpgradeID"
          },
          "register": {
            "type": "integer",
            "minimum": 0,
            "maximum": 8,
            "description": "The changed register"
          }
        },
        "required": [
          "action",
          "register"
        ]
      },
      "ProgrammingTimerStartEvent": {
        "title": "ProgrammingTimerStartEvent",
        "type": "object",
        "description": "",
        "properties": {
          "seconds": {
            "type": "integer",
            "minimum": 3,
            "maximum": 300,
            "description": "Time the timer will run for"
          },
          "end": {
            "type": "integer",
            "format": "int64",
            "description": "The time at which the timer ends. Given as `ms since epoche` [link](currentmillis.com)\n"
          }
        },
        "required": [
          "seconds",
          "end"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "GameEndEvent": {
        "title": "GameEndEvent",
        "type": "object",
        "description": "The game is over",
        "properties": {
          "winner": {
            "$ref": "#/components/schemas/Player"
          }
        },
        "required": [
          "winner"
        ],
        "x-tags": [
          "EventHandling"
        ]
      },
      "TimeElapsedEvent": {
        "title": "TimeElapsedEvent",
        "type": "object",
        "description": "A timer run out",
        "properties": {
          "original_duration": {
            "type": "integer",
            "description": "The duration of the timer\n",
            "minimum": 0
          },
          "context": {
            "type": "object",
            "description": "(optional) information about the elapsed timer"
          }
        },
        "required": [
          "original_duration"
        ]
      },
      "GamePhaseStep": {
        "title": "GamePhaseStep",
        "type": "string",
        "description": "WIP!\nCurrently class names. Enum later on\n\nDescribes the game phase more deeply"
      },
      "DiscardUpgradesEvent": {
        "title": "DiscardUpgradesEvent",
        "type": "object",
        "description": "This event is fired when a player exchanges or actively discards upgrades. The upgrades are removed from the game (but still accessible) ",
        "properties": {
          "upgrades": {
            "type": "array",
            "description": "The list of upgrades discarded",
            "items": {
              "$ref": "#/components/schemas/UpgradeID"
            }
          },
          "robot": {
            "$ref": "#/components/schemas/EntityID"
          }
        }
      },
      "EmptyEvent": {
        "title": "EmptyEvent",
        "type": "object",
        "description": "Event without data"
      },
      "DummyEvent": {
        "title": "DummyEvent",
        "type": "object"
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "The error message including a human readable description",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error-Message"
            }
          }
        }
      }
    },
    "parameters": {
      "game_id": {
        "name": "game_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GameID"
        },
        "description": "The id of the game to interact with"
      },
      "robot_id": {
        "name": "robot_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/EntityID"
        },
        "description": "the id of the robot to interact with"
      },
      "player_id": {
        "name": "player_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PlayerID"
        },
        "description": "the id of the player to interact with"
      },
      "upgrade_id": {
        "name": "upgrade_id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UpgradeID"
        },
        "description": "The id of the upgrade to interact with"
      }
    },
    "examples": {}
  },
  "tags": [
    {
      "description": "All actions needed to interact with players.<br>Keep in mid that a player is *not* a robot",
      "name": "Players"
    },
    {
      "description": "All actions needed to interact with the game itself and mostly to get information",
      "name": "Game"
    },
    {
      "description": "All actions directly done with the robots and other robot related actions",
      "name": "Robots"
    },
    {
      "description": "Buying and reading upgrades",
      "name": "Upgrades"
    },
    {
      "description": "Iterct with the the map",
      "name": "Map"
    },
    {
      "description": "Recive and react to events",
      "name": "EventHandling"
    },
    {
      "name": "Consumer"
    }
  ]
}